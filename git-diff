Last login: Sat Jul  6 22:31:32 on ttys011
You have new mail.
/usr/local/bin /usr/local/sbin /Users/tyler/.local/bin /Users/tyler/bin /usr/bin /bin /usr/sbin /sbin /usr/local/go/bin /usr/local/MacGPG2/bin /opt/X11/bin /Applications/Wireshark.app/Contents/MacOS
num  calls                time                       self            name
-----------------------------------------------------------------------------------
/Users/tyler/.fresh/build/shell.sh:source:178: no such file or directory: /Users/tyler/.aliasesrc

~
❯ vim ~/.zshrc
Error detected while processing /Users/tyler/.vimrc:
line   55:
E521: Number required after =: timeoutlen                                =
line   66:
E521: Number required after =: history                                   =
line   68:
E474: Invalid argument: encoding                                  =
line   69:
E518: Unknown option: longest
line   70:
E518: Unknown option: preview
line  118:
E518: Unknown option: slash,unix
line  119:
E518: Unknown option: options
line  308:
E521: Number required after =: laststatus                            =
line  334:
E474: Invalid argument: list:longest,full
line  335:
E518: Unknown option: at
line  338:
E518: Unknown option: indent,eol,start
line  339:
E518: Unknown option: h,l,<,>,[,]
line  340:
E518: Unknown option: block,onemore
line  341:
E521: Number required after =: scrolljump                                =
line  342:
E521: Number required after =: scrolloff                                 =
line  343:
E521: Number required after =: sidescroll                                =
line  344:
E521: Number required after =: sidescrolloff                             =
line  347:
E521: Number required after =: matchtime                                 =
line  349:
E121: Undefined variable: g:ivim_show_number





 .zshrc                                                                buffers
source ~/.fresh/build/shell.sh
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
 NORMAL   1:.zshrc                                zsh    100% ☰    1/1 ㏑ :  1
 .zshrc                                                                                  buffers
source ~/.fresh/build/shell.sh
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
 NORMAL   1:.zshrc                                       zsh     utf-8    100% ☰    1/1 ㏑ :  1


line  355:
E518: Unknown option: rnlmM
line  357:
E521: Number required after =: textwidth                                 =
line  360:
E518: Unknown option: tab:▸\ ,eol:¬,extends:❯,precedes:❮
line  384:
E492: Not an editor command: background                                = dark " Set background
line  386:
E518: Unknown option: 256
line  427:
E521: Number required after =: softtabstop                               =
line  428:
E521: Number required after =: shiftwidth                                =
line  460:
E521: Number required after =: foldlevelstart                            =
line  461:
E521: Number required after =: foldcolumn                                =
line  479:
E518: Unknown option: MyFoldText()
delimitMate: There seems to be some incompatibility with your settings that may interfer with the expansion of <CR>. See :help 'delimitMate_expand_cr' for details.
Press ENTER or type command to continue

~ 7s
❯ vim ~/.fresh/source/saylestyler
Error detected while processing /Users/tyler/.vimrc:
line   55:
E521: Number required after =: timeoutlen                                =
line   66:
E521: Number required after =: history                                   =

 .f/s/saylestyler                             buffers
^[[?12;4$y
 .f/s/saylestyler                             buffers
                                                                                       |  1 " Press ? for help
 .f/s/saylestyler                             buffers
  1 " Press ? for help                                                                 |  1 " Press ? for help
line   68:
E474: Invalid argument: encoding                                  =
line   69:
E518: Unknown option: longest
line   70:
E518: Unknown option: preview
line  118:
E518: Unknown option: slash,unix
line  119:
E518: Unknown option: options
line  308:
E521: Number required after =: laststatus                            =
line  334:
E474: Invalid argument: list:longest,full
line  335:
E518: Unknown option: at
line  338:
E518: Unknown option: indent,eol,start
line  339:
E518: Unknown option: h,l,<,>,[,]
line  340:
E518: Unknown option: block,onemore
line  341:
E521: Number required after =: scrolljump                                =
line  342:
E521: Number required after =: scrolloff                                 =
line  343:
E521: Number required after =: sidescroll                                =
line  344:
E521: Number required after =: sidescrolloff                             =
line  347:
E521: Number required after =: matchtime                                 =
line  349:
E121: Undefined variable: g:ivim_show_number
line  355:
E518: Unknown option: rnlmM
line  357:
E521: Number required after =: textwidth                                 =
line  360:
E518: Unknown option: tab:▸\ ,eol:¬,extends:❯,precedes:❮
line  384:
E492: Not an editor command: background                                = dark " Set background
line  386:
E518: Unknown option: 256
line  427:
E521: Number required after =: softtabstop                               =
line  428:
E521: Number required after =: shiftwidth                                =
line  460:
E521: Number required after =: foldlevelstart                            =
line  461:
E521: Number required after =: foldcolumn                                =
line  479:
E518: Unknown option: MyFoldText()
delimitMate: There seems to be some incompatibility with your settings that may interfer with the expansion of <CR>. See :help 'delimitMate_expand_cr' for details.
Press ENTER or type command to continue

~ 17s
❯ :x
zsh: command not found: :x

~
❯ ls
Applications                                  Public                                        recruitment-assessment-A
AssemblyScript                                Search                                        recruitment-assessment-comprehensive-A-master
CBS                                           UPLOAD-HEMLIGHETS                             recruitment-assessment-comprehensive-B
CoStar-iOS-cache                              Vim-plug                                      resurser
Colors                                        app-assessment-mod-0                          rollup-starter-lib
Desktop                                       bin                                           seeql
Documents                                     cipherchase                                   setup.sh
Downloads                                     cra                                           studera
Dropbox                                       electron-api-demos                            symlink-all-dots.sh
General                                       hack-hour-ny-11                               todo
Key                                           linuxify                                      totfiles
Library                                       livestream-server                             ttd
Local                                         main                                          twe4ked
Movies                                        notodo                                        tylsyl
Music                                         react-express-starter                         vanille
Pictures                                      react-tutorial-tic-tac-toe

~
❯ ls .ivim
LICENSE.txt README.md   setup.sh    snapshot    vimrc       vimrc_mini

~
❯ ls .ivim

~
❯ vim
Error detected while processing /Users/tyler/.vimrc:
line   55:
E521: Number required after =: timeoutlen                                =
line   66:
E521: Number required after =: history                                   =
line   68:



                            buffers

       _       _
      (_)   __(_)___ ___
     / / | / / / __ `__ \
    / /| |/ / / / / / / /
   /_/ |___/_/_/ /_/ /_/
        ¦       ¦       ¦

   [e]  <empty buffer>

   MRU

   [0]  ~/.zshrc
   [1]  ~/.vimrc
   [2]  ~/.freshrc
   [3]  ~/.zprezto/init.zsh
   [4]  ~/setup.sh
   [5]  ~/cipherchase/.babelrc
   [6]  ~/.config/nvim/init.vim
   [7]  ~/.ivim/vimrc
   [8]  ~/.nvmrc
   [9]  ~/.ivim/setup.sh

   MRU /Users/tyler

   [10] .zshrc
   [11] .vimrc
   [12] .freshrc
   [13] .zprezto/init.zsh
   [14] setup.sh
   [15] cipherchase/.babelrc
   [16] .config/nvim/init.vim
   [17] .ivim/vimrc
   [18] .nvmrc
   [19] .ivim/setup.sh

   [q]  <quit>


    This configuration is maintained by Xiao-Ou Zhang <kepbod@gmail.com> and other contributors. Thanks!
~
~
~
~
~
~
~
~
~
~
~
~
~
~
 startify
:so ~/.ivim/vimrc
E474: Invalid argument: encoding                                  =
line   69:
E518: Unknown option: longest
line   70:
E518: Unknown option: preview
line  118:
E518: Unknown option: slash,unix
line  119:
E518: Unknown option: options
line  308:
E521: Number required after =: laststatus                            =
line  334:
E474: Invalid argument: list:longest,full
line  335:
E518: Unknown option: at
line  338:
E518: Unknown option: indent,eol,start
line  339:
E518: Unknown option: h,l,<,>,[,]
line  340:
E518: Unknown option: block,onemore
line  341:
E521: Number required after =: scrolljump                                =
line  342:
E521: Number required after =: scrolloff                                 =
line  343:
E521: Number required after =: sidescroll                                =
line  344:
E521: Number required after =: sidescrolloff                             =
line  347:
E521: Number required after =: matchtime                                 =
line  349:
E121: Undefined variable: g:ivim_show_number
line  355:
E518: Unknown option: rnlmM
line  357:
E521: Number required after =: textwidth                                 =
line  360:
E518: Unknown option: tab:▸\ ,eol:¬,extends:❯,precedes:❮
line  384:
E492: Not an editor command: background                                = dark " Set background
line  386:
E518: Unknown option: 256
line  427:
E521: Number required after =: softtabstop                               =
line  428:
E521: Number required after =: shiftwidth                                =
line  460:
E521: Number required after =: foldlevelstart                            =
line  461:
E521: Number required after =: foldcolumn                                =
line  479:
E518: Unknown option: MyFoldText()
delimitMate: There seems to be some incompatibility with your settings that may interfer with the expansion of <CR>. See :help 'delimitMate_expand_cr' for details.

Press ENTER or type command to continue

~ 8s
❯ vim ~/.vimrc
Error detected while processing /Users/tyler/.vimrc:
line   55:
E521: Number required after =: timeoutlen                                =
line   66:
E521: Number required after =: history                                   =





line   68:
E474: Invalid argument: encoding                                  =
line   69:
E518: Unknown option: longest
line   70:
E518: Unknown option: preview
line  118:
E518: Unknown option: slash,unix
line  119:
E518: Unknown option: options
line  308:
E521: Number required after =: laststatus                            =
line  334:
E474: Invalid argument: list:longest,full
line  335:
E518: Unknown option: at
line  338:
E518: Unknown option: indent,eol,start
line  339:
E518: Unknown option: h,l,<,>,[,]
line  340:
E518: Unknown option: block,onemore
line  341:
                                                                                                                                 buffers
149      .gist-vim*
150      .git-credentials
151      .gitattributes*
152      .google-cookie
153      .graphcoolrc
154      .gvimrc
155      .haxornewsconfig*
156      .haxornewshistory*
157      .hhvm.hhbc
158      .history*
159      .htmlhintrc*
160      .importjs.js
161      .iterm2_shell_integration.fish*
162      .iterm2_shell_integration.zsh*
163      .jrnl*
164      .jshintrc*
165      .lesshst
166      .linuxify
167      .mkshrc
168      .NERDTreeBookmarks
169      .netrc
170      .node_repl_history*
171      .notes*
172      .nvmrc*
173      .pgpass*
174      .php_cs.cache
175      .php_history
176      .planck_history*
177      .profile
178      .pry_history*
179      .psql_history
180      .screenrc
181      .src-config.json
182      .taskrc*
183      .viminfo
184      .vimrc -> /Users/tyler/.fresh/build/vimrc RO
185      .vimrc.local -> /Users/tyler/.fresh/build/vimrc.local RO
186      .wget-hsts
187      .Xmodmap
188      .Xresources
189      .yarnrc
190      .z
191      .zcompdump
192      .zsh-history
                                                                                                                                 buffers
158      .history*
159      .htmlhintrc*
160      .importjs.js
161      .iterm2_shell_integration.fish*
162      .iterm2_shell_integration.zsh*
163      .jrnl*
164      .jshintrc*
165      .lesshst
166      .linuxify
167      .mkshrc
168      .NERDTreeBookmarks
169      .netrc
170      .node_repl_history*
171      .notes*
172      .nvmrc*
173      .pgpass*
174      .php_cs.cache
175      .php_history
176      .planck_history*
177      .profile
178      .pry_history*
179      .psql_history
180      .screenrc
181      .src-config.json
182      .taskrc*
183      .viminfo
184      .vimrc -> /Users/tyler/.fresh/build/vimrc RO
185      .vimrc.local -> /Users/tyler/.fresh/build/vimrc.local RO
186      .wget-hsts
187      .Xmodmap
188      .Xresources
189      .yarnrc
190      .z
191      .zcompdump
192      .zsh-history
193      .zshrc
194      .zshrc.zwc RO
195      Colors
196      General
197      Key
198      Local
199      Search
200      setup.sh*
 /Users/tyler 
NERDTree Menu. Use j/k/enter . or the shortcuts indicated
=========================================================
> (a)dd a childnode
  (m)ove the current node
  (d)elete the current node
  (r)eveal in Finder the current node
  (o)pen the current node with system editor
  (q)uicklook the current node
  (c)opy the current node
  copy (p)ath to clipboard
  (l)ist the current node

Delete the current node
==========================================================
Are you sure you wish to delete the node:
/Users/tyler/.zshrc.zwc (yN):
                                                                                                                                 buffers
149      .gist-vim*
E521: Number required after =: scrolljump                                =
line  342:
E521: Number required after =: scrolloff                                 =
line  343:
E521: Number required after =: sidescroll                                =
line  344:
E521: Number required after =: sidescrolloff                             =
line  347:
E521: Number required after =: matchtime                                 =
line  349:
E121: Undefined variable: g:ivim_show_number
line  355:
E518: Unknown option: rnlmM
line  357:
E521: Number required after =: textwidth                                 =
line  360:
E518: Unknown option: tab:▸\ ,eol:¬,extends:❯,precedes:❮
line  384:
E492: Not an editor command: background                                = dark " Set background
line  386:
E518: Unknown option: 256
line  427:
E521: Number required after =: softtabstop                               =
line  428:
E521: Number required after =: shiftwidth                                =
line  460:
E521: Number required after =: foldlevelstart                            =
line  461:
E521: Number required after =: foldcolumn                                =
line  479:
E518: Unknown option: MyFoldText()
delimitMate: There seems to be some incompatibility with your settings that may interfer with the expansion of <CR>. See :help 'delimitMate_expand_cr' for details.
Press ENTER or type command to continue

~ 15s
❯ ls
Applications                                  Public                                        recruitment-assessment-A
AssemblyScript                                Search                                        recruitment-assessment-comprehensive-A-master
CBS                                           UPLOAD-HEMLIGHETS                             recruitment-assessment-comprehensive-B
CoStar-iOS-cache                              Vim-plug                                      resurser
Colors                                        app-assessment-mod-0                          rollup-starter-lib
Desktop                                       bin                                           seeql
Documents                                     cipherchase                                   setup.sh
Downloads                                     cra                                           studera
Dropbox                                       electron-api-demos                            symlink-all-dots.sh
General                                       hack-hour-ny-11                               todo
Key                                           linuxify                                      totfiles
Library                                       livestream-server                             ttd
Local                                         main                                          twe4ked
Movies                                        notodo                                        tylsyl
Music                                         react-express-starter                         vanille
Pictures                                      react-tutorial-tic-tac-toe

~
❯ vim .

/Applications/Xcode.app/Contents/Developer/usr/bin/make -f make_mac.mak
clang -O2 -W -Wall -Wno-unused -Wno-unused-parameter -bundle -fPIC  -o lib/vimproc_mac.so src/proc.c

~ 35s
❯ ls
Applications                                  Public                                        recruitment-assessment-A
AssemblyScript                                Search                                        recruitment-assessment-comprehensive-A-master
CBS                                           UPLOAD-HEMLIGHETS                             recruitment-assessment-comprehensive-B
CoStar-iOS-cache                              Vim-plug                                      resurser
Colors                                        app-assessment-mod-0                          rollup-starter-lib
Desktop                                       bin                                           seeql
Documents                                     cipherchase                                   setup.sh
Downloads                                     cra                                           studera
Dropbox                                       electron-api-demos                            symlink-all-dots.sh
General                                       hack-hour-ny-11                               todo
Key                                           linuxify                                      totfiles
Library                                       livestream-server                             ttd
Local                                         main                                          twe4ked
Movies                                        notodo                                        tylsyl
Music                                         react-express-starter                         vanille
Pictures                                      react-tutorial-tic-tac-toe

~
❯ ls
Applications                                  Public                                        recruitment-assessment-A
AssemblyScript                                Search                                        recruitment-assessment-comprehensive-A-master
CBS                                           UPLOAD-HEMLIGHETS                             recruitment-assessment-comprehensive-B
CoStar-iOS-cache                              Vim-plug                                      resurser
Colors                                        app-assessment-mod-0                          rollup-starter-lib
Desktop                                       bin                                           seeql
Documents                                     cipherchase                                   setup.sh
Downloads                                     cra                                           studera
Dropbox                                       electron-api-demos                            symlink-all-dots.sh
General                                       hack-hour-ny-11                               todo
Key                                           linuxify                                      totfiles
Library                                       livestream-server                             ttd
Local                                         main                                          twe4ked
Movies                                        notodo                                        tylsyl
Music                                         react-express-starter                         vanille
Pictures                                      react-tutorial-tic-tac-toe

~
❯ vim .

~ 6s
❯ vim ~/

~
❯ cd totfiles

~/totfiles master*
❯ ls
Brew                   bitbar-plugins         home                   pygo.py
README.md              build-brew-path-var.sh iterm2                 scripts

~/totfiles master*
❯ ls home/

~/totfiles master*
❯ cat home/.vimrc
"   Main Contributor: Xiao-Ou Zhang (kepbod) <kepbod@gmail.com>
"   Version: 3.0
"   Created: 2012-01-20
"   Last Modified: 2016-12-29
"
"   Sections:
"     -> ivim Setting
"     -> General
"     -> Platform Specific Setting
"     -> Vim-plug
"     -> User Interface
"     -> Colors and Fonts
"     -> Indent Related
"     -> Search Related
"     -> Fold Related
"     -> Key Mapping
"     -> Plugin Setting
"     -> Local Setting
"
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"------------------------------------------------
" => ivim Setting
"------------------------------------------------

" ivim user setting
" ivim color settings (hybrid, gruvbox or tender)
let g:ivim_default_scheme                     = 'gruvbox'
" ivim ui setting
let g:ivim_fancy_font                         = 1 " Enable using fancy font
" let g:ivim_show_n
" ivim autocomplete setting (YCM or NEO)
" let g:ivim_autocomplete='NEO'
" ivim plugin setting
let g:ivim_bundle_groups                      = ['ui', 'enhance', 'move', 'navigate', 'git', 'language']

" Customise ivim settings for personal usage
if filereadable(expand($HOME . '/.vimrc.ivim.local'))
    source $HOME/.vimrc.ivim.local
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"------------------------------------------------
" => General
"------------------------------------------------

set nocompatible " Get out of vi compatible mode
filetype plugin indent on " Enable filetype
let mapleader                                 = ',' " Change the mapleader
let maplocalleader                            = '\' " Change the maplocalleader
set timeoutlen                                = 500 " Time to wait for a command

" Source the vimrc file after saving it
autocmd BufWritePost $MYVIMRC source $MYVIMRC
" Fast edit the .vimrc file using ,x
nnoremap <Leader>x :tabedit $MYVIMRC<CR>

set autoread " Set autoread when a file is changed outside
set autowrite " Write on make/shell commands
set hidden " Turn on hidden"

set history                                   = 1000 " Increase the lines of history
set modeline " Turn on modeline
set encoding                                  = utf-8 " Set utf-8 encoding
set completeopt                              += longest " Optimize auto complete
set completeopt                              += preview " Optimize auto complete

set undofile " Set undo

" Set directories
function! InitializeDirectories()
    let parent                                = $HOME
    let prefix                                = '.vim'
    let dir_list                              = {
                \ 'backup': 'backupdir',
                \ 'view': 'viewdir',
                \ 'swap': 'directory',
                \ 'undo': 'undodir',
                \ 'cache': '',
                \ 'session': ''}

    for [dirname, settingname] in items(dir_list)
        let directory                         = parent.'/'.prefix.'/'.dirname.'/'
        if !isdirectory(directory)
            if exists('*mkdir')
                let dir                       = substitute(directory, "/$", "", "")
                call mkdir(dir, 'p')
            else
                echo 'Warning: Unable to create directory: '.directory
            endif
        endif
        if settingname                       != ''
            exe 'set '.settingname.'='.directory
        endif
    endfor

endfunction
call InitializeDirectories()

autocmd BufWinLeave *.* silent! mkview " Make Vim save view (state) (folds, cursor, etc)
autocmd BufWinEnter *.* silent! loadview " Make Vim load view (state) (folds, cursor, etc)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"-------------------------------------------------
" => Platform Specific Setting
"-------------------------------------------------

" On Windows, also use .vim instead of vimfiles
if has('win32') || has('win64')
    set runtimepath                           = $HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
endif

set viewoptions                              += slash,unix " Better Unix/Windows compatibility
set viewoptions                              -= options " in case of mapping change

"--------------------------------------------------
" => Vim-plug
"--------------------------------------------------

if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')

if count(g:ivim_bundle_groups, 'ui') " UI setting
    Plug 'kristijanhusak/vim-hybrid-material' " Colorscheme hybrid material
    Plug 'morhetz/gruvbox' " Colorscheme gruvbox
    Plug 'jacoborus/tender.vim' " Colorscheme tender
    Plug 'vim-airline/vim-airline' | Plug 'vim-airline/vim-airline-themes' " Status line
    Plug 'Yggdroot/indentLine' " Indentation level
    Plug 'ryanoasis/vim-devicons' " Devicons
    Plug 'bling/vim-bufferline' " Buffer line
    Plug 'mhinz/vim-startify' " Start page
    Plug 'junegunn/goyo.vim', { 'for': 'markdown' } " Distraction-free
    Plug 'junegunn/limelight.vim', { 'for': 'markdown' } " Hyperfocus-writing
endif

if count(g:ivim_bundle_groups, 'enhance') " Vim enhancement
    Plug 'vimwiki/vimwiki'
    Plug 'ctrlpvim/ctrlp.vim'
    if has('nvim')
      Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
    else
      Plug 'Shougo/deoplete.nvim'
      Plug 'roxma/nvim-yarp'
      Plug 'roxma/vim-hug-neovim-rpc'
    endif

    Plug 'Raimondi/delimitMate' " Closing of quotes
    Plug 'tomtom/tcomment_vim' " Commenter
    Plug 'tpope/vim-abolish' " Abolish
    Plug 'tpope/vim-repeat' " Repeat
    Plug 'terryma/vim-multiple-cursors' " Multiple cursors
    Plug 'junegunn/vim-slash' " In-buffer search
    Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' } " Undo tree
    Plug 'tpope/vim-surround' " Surround
    Plug 'junegunn/vim-easy-align', { 'on': ['<Plug>(EasyAlign)', 'EasyAlign'] } " Easy align
    Plug 'ludovicchabant/vim-gutentags' " Manage tag files
    Plug 'AndrewRadev/splitjoin.vim' " Splitjoin
    Plug 'sickill/vim-pasta' " Vim pasta
    Plug 'Keithbsmiley/investigate.vim' " Helper
    Plug 'wikitopian/hardmode' " Hard mode
    Plug 'wellle/targets.vim' " Text objects
    Plug 'roman/golden-ratio' " Resize windows
    Plug 'chrisbra/vim-diff-enhanced' " Create better diffs
endif

if count(g:ivim_bundle_groups, 'move') " Moving
    Plug 'tpope/vim-unimpaired' " Pairs of mappings
    Plug 'Lokaltog/vim-easymotion' " Easy motion
    Plug 'kepbod/quick-scope' " Quick scope
    Plug 'bkad/CamelCaseMotion' " Camel case motion
    Plug 'majutsushi/tagbar' " Tag bar
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  } " Fuzzy finder
    Plug 'junegunn/fzf.vim' " Fuzzy finder plugin
endif

if count(g:ivim_bundle_groups, 'navigate') " Navigation
    Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } " NERD tree
    Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' } " NERD tree git plugin
    " Plug 'mhinz/vim-tmuxify' " Tmux panes
endif

" if count(g:ivim_bundle_groups, 'complete') " Completion
"     if g:ivim_autocomplete=='NEO'
"         if has('lua')
"             let g:ivim_completion_engine='neocomplete'
"             Plug 'Shougo/neocomplete.vim' " Auto completion framework
"         else
"             let g:ivim_completion_engine='neocomplcache'
"             Plug 'Shougo/neocomplcache.vim' " Auto completion framework
"         endif
"         Plug 'Shougo/neosnippet.vim' " Snippet engine
"         Plug 'Shougo/neosnippet-snippets' " Snippets
"         Plug 'Shougo/vimproc.vim', { 'do': 'make' }
"         Plug 'wellle/tmux-complete.vim' " Completion for tmux panes
"     else
"         " Auto completion framework
"         let g:ivim_completion_engine='YouCompleteMe'
"         Plug 'Valloric/YouCompleteMe', { 'do': './install.py' } "Auto completion framework
"         Plug 'honza/vim-snippets' " Snippets
"         Plug 'sirver/ultisnips' " Snippet engine
"     endif
" endif
"
" if count(g:ivim_bundle_groups, 'compile') " Compiling
"     Plug 'scrooloose/syntastic' " Syntax checking
"     Plug 'xuhdev/SingleCompile' " Single compile
" endif

if count(g:ivim_bundle_groups, 'git') " Git
    Plug 'tpope/vim-fugitive' " Git wrapper
    Plug 'junegunn/gv.vim' " Gitk clone
    if has('signs')
        Plug 'airblade/vim-gitgutter' " Git diff sign
    endif
endif

if count(g:ivim_bundle_groups, 'language') " Language Specificity
    Plug 'davidhalter/jedi-vim', { 'for': 'python' } " Python jedi plugin
    Plug 'fatih/vim-go', { 'for': 'go' } " Golang
    Plug 'tpope/vim-rails', { 'for': [] } " Rails
    Plug 'mattn/emmet-vim', { 'for': ['html', 'css'] } " Emmet
    Plug 'LaTeX-Box-Team/LaTeX-Box' " LaTex
    Plug 'sheerun/vim-polyglot' " Language Support
endif

if filereadable(expand($HOME . '/.vimrc.bundles.local')) " Load local bundles
    source $HOME/.vimrc.bundles.local
endif

call plug#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"-------------------------------------------------
" => User Interface
"-------------------------------------------------

if count(g:ivim_bundle_groups, 'ui')
    let g:airline#extensions#tabline#enabled  = 1
else
    " Set title
    set title
    set titlestring                           = %t%(\ %m%)%(\ (%{expand('%:p:h')})%)%(\ %a%)

    " Set tabline
    set showtabline                           = 2 " Always show tab line
    " Set up tab labels
    set guitablabel                           = %m%N:%t[%{tabpagewinnr(v:lnum)}]
    set tabline                               = %!MyTabLine()
    function! MyTabLine()
        let s                                 = ''
        let t                                 = tabpagenr() " The index of current page
        let i                                 = 1
        while i                              <= tabpagenr('$') " From the first page
            let buflist                       = tabpagebuflist(i)
            let winnr                         = tabpagewinnr(i)
            let s                            .= (i==t ? '%#TabLineSel#' : '%#TabLine#')
            let s                            .= '%'.i.'T'
            let s                            .= ' '
            let bufnr                         = buflist[winnr-1]
            let file                          = bufname(bufnr)
            let buftype                       = getbufvar(bufnr, 'buftype')
            let m                             = ''
            if getbufvar(bufnr, '&modified')
                let m                         = '[+]'
            endif
            if buftype                       == 'nofile'
                if file                      =~ '\/.'
                    let file                  = substitute(file, '.*\/\ze.', '', '')
                endif
            else
                let file                      = fnamemodify(file, ':p:t')
            endif
            if file                          == ''
                let file                      = '[No Name]'
            endif
            let s                            .= m
            let s                            .= i.':'
            let s                            .= file
            let s                            .= '['.winnr.']'
            let s                            .= ' '
            let i                             = i+1
        endwhile
        let s                                .= '%T%#TabLineFill#%='
        let s                                .= (tabpagenr('$')>1 ? '%999XX' : 'X')
        return s
    endfunction
    " Set tabline colorscheme
    if g:ivim_default_scheme                 == 'gruvbox'
        let g:gruvbox_invert_tabline          = 1
    endif
    " Set up tab tooltips with each buffer name
    set guitabtooltip                         = %F
endif

" Set status line
if count(g:ivim_bundle_groups, 'ui')
    set laststatus                            = 2 " Show the statusline
    set noshowmode " Hide the default mode text
    " Set status line colorscheme
    if g:ivim_default_scheme                 == 'hybrid'
        let g:airline_theme                   = 'bubblegum'
    elseif g:ivim_default_scheme             == 'tender'
        let g:tender_airline                  = 1
        let g:airline_theme                   = 'tender'
    endif
    set ttimeoutlen                           = 50
    let g:bufferline_echo                     = 0
    let g:bufferline_modified                 = '[+]'
    if g:ivim_fancy_font
        let g:airline_powerline_fonts         = 1
    else
        let g:airline_left_sep                = ''
        let g:airline_right_sep               = ''
    endif
endif

" Only have cursorline in current window and in normal window
autocmd WinLeave * set nocursorline
" autocmd WinEnter * set cursorline
autocmd InsertEnter * set nocursorline
" autocmd InsertLeave * set cursorline
set wildmenu " Show list instead of just completing
set wildmode                                  = list:longest,full " Use powerful wildmenu
set shortmess                                 = at " Avoids hit enter
set showcmd " Show cmd

set backspace                                 = indent,eol,start " Make backspaces delete sensibly
set whichwrap                                += h,l,<,>,[,] " Backspace and cursor keys wrap to
set virtualedit                               = block,onemore " Allow for cursor beyond last character
set scrolljump                                = 5 " Lines to scroll when cursor leaves screen
set scrolloff                                 = 3 " Minimum lines to keep above and below cursor
set sidescroll                                = 1 " Minimal number of columns to scroll horizontally
set sidescrolloff                             = 10 " Minimal number of screen columns to keep away from cursor

set showmatch " Show matching brackets/parenthesis
set matchtime                                 = 2 " Decrease the time to blink

if g:ivim_show_number
    set number " Show line numbers
    " Toggle relativenumber
    nnoremap <Leader>n :set relativenumber!<CR>
endif

set formatoptions                            += rnlmM " Optimize format options
set wrap " Set wrap
set textwidth                                 = 80 " Change text width
if g:ivim_fancy_font
    " set list " Show these tabs and spaces and so on
    set listchars                             = tab:▸\ ,eol:¬,extends:❯,precedes:❮ " Change listchars
    set linebreak " Wrap long lines at a blank
    " set showbreak=↪  " Change wrap line break
    " set fillchars=diff:⣿,vert:│ " Change fillchars
    " augroup trailing " Only show trailing whitespace when not in insert mode
    "     autocmd!
    "     autocmd InsertEnter * :set listchars-=trail:⌴
    "     autocmd InsertLeave * :set listchars+=trail:⌴
    " augroup END
endif

" Set gVim UI setting
if has('gui_running')
    set guioptions                           -= m
    set guioptions                           -= T
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"-------------------------------------------------
" => Colors and Fonts
"-------------------------------------------------

syntax on " Enable syntax
background                                = dark " Set background
if !has('gui_running')
    set t_Co                                  = 256 " Use 256 colors
endif

" Use true colors
if (empty($TMUX))
    if (has("termguicolors"))
        set termguicolors
    endif
endif

" Load a colorscheme
if count(g:ivim_bundle_groups, 'ui')
    if g:ivim_default_scheme                 == 'hybrid'
        colorscheme hybrid_reverse
    elseif g:ivim_default_scheme             == 'gruvbox'
        colorscheme gruvbox
    elseif g:ivim_default_scheme             == 'tender'
        colorscheme tender
    endif
else
    colorscheme desert
endif

" Set GUI font
if has('gui_running')
    if has('gui_gtk')
        set guifont                           = Hack:18
    else
        set guifont                           = Hack:h18
    endif
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"-------------------------------------------------
" => Indent Related
"-------------------------------------------------

set autoindent " Preserve current indent on new lines
set cindent " set C style indent
set expandtab " Convert all tabs typed to spaces
set softtabstop                               = 2 " Indentation levels every four columns
set shiftwidth                                = 2 " Indent/outdent by four columns
set shiftround " Indent/outdent to nearest tabstop

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"-------------------------------------------------
" => Search Related
"-------------------------------------------------

set ignorecase " Case insensitive search
set smartcase " Case sensitive when uc present
set hlsearch " Highlight search terms
set incsearch " Find as you type search
set gdefault " turn on g flag

" Use sane regexes
nnoremap / /\v
vnoremap / /\v
cnoremap s/ s/\v
nnoremap ? ?\v
vnoremap ? ?\v
cnoremap s? s?\v

" Use ,Space to toggle the highlight search
nnoremap <Leader><Space> :set hlsearch!<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"-------------------------------------------------
" => Fold Related
"-------------------------------------------------

set foldlevelstart                            = 0 " Start with all folds closed
set foldcolumn                                = 1 " Set fold column

" Space to toggle and create folds.
nnoremap <silent> <Space> @                   = (foldlevel('.') ? 'za' : '\<Space>')<CR>
vnoremap <Space> zf

" Set foldtext
function! MyFoldText()
    let line                                  = getline(v:foldstart)
    let nucolwidth                            = &foldcolumn+&number*&numberwidth
    let windowwidth                           = winwidth(0)-nucolwidth-3
    let foldedlinecount                       = v:foldend-v:foldstart+1
    let onetab                                = strpart('          ', 0, &tabstop)
    let line                                  = substitute(line, '\t', onetab, 'g')
    let line                                  = strpart(line, 0, windowwidth-2-len(foldedlinecount))
    let fillcharcount                         = windowwidth-len(line)-len(foldedlinecount)
    return line.'…'.repeat(' ',fillcharcount).foldedlinecount.'L'.' '
endfunction
set foldtext                                  = MyFoldText()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"-------------------------------------------------
" => Key Mapping
"-------------------------------------------------

" Make j and k work the way you expect
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk

" Navigation between windows
nnoremap <C-J> <C-W>j
nnoremap <C-K> <C-W>k
nnoremap <C-H> <C-W>h
nnoremap <C-L> <C-W>l

" Same when jumping around
nnoremap g; g;zz
nnoremap g, g,zz

" Reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" Repeat last substitution, including flags, with &.
nnoremap & :&&<CR>
xnoremap & :&&<CR>

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

" Select entire buffer
nnoremap vaa ggvGg_

" Strip all trailing whitespace in the current file
nnoremap <Leader>q :%s/\s\+$//<CR>:let @     /= ''<CR>

" Modify all the indents
nnoremap \                                    = gg=G

" See the differences between the current buffer and the file it was loaded from
command! DiffOrig vert new | set bt           = nofile | r ++edit # | 0d_
            \ | diffthis | wincmd p | diffthis

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"--------------------------------------------------
" => Plugin Setting
"--------------------------------------------------

" Setting for UI plugins
if count(g:ivim_bundle_groups, 'ui')

    " -> Startify
    let g:startify_session_dir                = $HOME . '/.vim/session'
    let g:startify_custom_header              = [
                \'       _       _         ',
                \'      (_)   __(_)___ ___ ',
                \'     / / | / / / __ `__ \',
                \'    / /| |/ / / / / / / /',
                \'   /_/ |___/_/_/ /_/ /_/ ',
                \'                         ']
    let g:startify_custom_footer              = ['', '    This configuration is maintained by Xiao-Ou Zhang <kepbod@gmail.com> and other contributors. Thanks!']
    if has('gui_running')
        hi StartifyHeader  guifg             =# 87afff
        hi StartifyFooter  guifg             =# 87afff
        hi StartifyBracket guifg             =# 585858
        hi StartifyNumber  guifg             =# ffaf5f
        hi StartifyPath    guifg             =# 8a8a8a
        hi StartifySlash   guifg             =# 585858
    else
        hi StartifyHeader  ctermfg            = 111
        hi StartifyFooter  ctermfg            = 111
        hi StartifyBracket ctermfg            = 240
        hi StartifyNumber  ctermfg            = 215
        hi StartifyPath    ctermfg            = 245
        hi StartifySlash   ctermfg            = 240
    endif

    " -> Goyo & Limelight
    autocmd! User GoyoEnter Limelight
    autocmd! User GoyoLeave Limelight!

endif

" Setting for enhancement plugins
if count(g:ivim_bundle_groups, 'enhance')

    " -> delimitMate
    let delimitMate_expand_cr                 = 1
    let delimitMate_expand_space              = 1
    let delimitMate_balance_matchpairs        = 1

    " -> Tcomment
    " Map \<Space> to commenting
    function! IsWhiteLine()
        if (getline('.')                     =~ '^$')
            exe 'TCommentBlock'
            normal! j
        else
            normal! A
            exe 'TCommentRight'
            normal! l
            normal! x
        endif
        startinsert!
    endfunction
    nnoremap <silent> <LocalLeader><Space> :call IsWhiteLine()<CR>

    " -> Undo tree
    nnoremap <Leader>u :UndotreeToggle<CR>
    let g:undotree_SetFocusWhenToggle         = 1

    " -> Easy Align
    xmap ga <Plug>(EasyAlign)
    nmap ga <Plug>(EasyAlign)

    " -> Gutentags
    let g:gutentags_cache_dir                 = $HOME . '/.vim/cache/ctags'

    " -> Splitjoin
    let g:splitjoin_split_mapping             = ',s'
    let g:splitjoin_join_mapping              = ',j'
    let g:splitjoin_normalize_whitespace      = 1
    let g:splitjoin_align                     = 1

    " -> Investigate.vim
    nnoremap K :call investigate#Investigate()<CR>
    " let g:investigate_use_dash=1


    " -> EnhancedDiff
    let &diffexpr                             = 'EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'

endif

" setting for moving plugins
if count(g:ivim_bundle_groups, 'move')

    " -> Tag bar
    nnoremap <Leader>t :TagbarToggle<CR>
    let g:tagbar_autofocus                    = 1
    let g:tagbar_expand                       = 1
    let g:tagbar_foldlevel                    = 2
    let g:tagbar_autoshowtag                  = 1

    " Matchit
    " Start mathit
    packadd! matchit
    " Use Tab instead of % to switch
    nmap <Tab> %
    vmap <Tab> %

endif

" Setting for navigation plugins
if count(g:ivim_bundle_groups, 'navigate')

    " -> NERD Tree
    nnoremap <Leader>f :NERDTreeToggle<CR>
    let NERDTreeChDirMode                     = 2
    let NERDTreeShowBookmarks                 = 1
    let NERDTreeShowHidden                    = 1
    let NERDTreeShowLineNumbers               = 1
    augroup nerd_loader
        autocmd!
        autocmd VimEnter * silent! autocmd! FileExplorer
        autocmd BufEnter,BufNew *
                    \  if isdirectory(expand('<amatch>'))
                    \|   call plug#load('nerdtree')
                    \|   execute 'autocmd! nerd_loader'
                    \| endif
    augroup END

endif

" Setting for completion plugins
" if count(g:ivim_bundle_groups, 'complete')
"     if g:ivim_autocomplete=='NEO'
"         " -> Neocomplete & Neocomplcache
"         " Use Tab and S-Tab to select candidate
"         inoremap <expr><Tab>  pumvisible() ? "\<C-N>" : "\<Tab>"
"         inoremap <expr><S-Tab> pumvisible() ? "\<C-P>" : "\<S-Tab>"
"         if g:ivim_completion_engine=='neocomplete'
"             let g:neocomplete#enable_at_startup=1
"             let g:neocomplete#data_directory=$HOME . '/.vim/cache/neocomplete'
"             let g:neocomplete#enable_auto_delimiter=1
"             " Use <C-E> to close popup
"             inoremap <expr><C-E> neocomplete#cancel_popup()
"             inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
"                         \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
"                         \ pumvisible() ? neocomplete#close_popup() : "\<CR>"
"         else
"             let g:neocomplcache_enable_at_startup=1
"             let g:neocomplcache_temporary_dir=$HOME . '/.vim/cache/neocomplcache'
"             let g:neocomplcache_enable_auto_delimiter=1
"             let g:neocomplcache_enable_fuzzy_completion=1
"             " Use <C-E> to close popup
"             inoremap <expr><C-E> neocomplcache#cancel_popup()
"             inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
"                         \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
"                         \ pumvisible() ? neocomplcache#close_popup() : "\<CR>"
"         endif
"         " Setting for specific language
"         if has('lua')
"             if !exists('g:neocomplete#force_omni_input_patterns')
"                 let g:neocomplete#force_omni_input_patterns={}
"             endif
"             let g:neocomplete#force_omni_input_patterns.python=
"             \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
"         else
"             if !exists('g:neocomplcache_force_omni_patterns')
"                 let g:neocomplcache_force_omni_patterns={}
"             endif
"             let g:neocomplcache_force_omni_patterns.python=
"             \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
"         endif
"         autocmd FileType python setlocal omnifunc=jedi#completions
"         let g:jedi#completions_enabled=0
"         let g:jedi#auto_vim_configuration=0
"         let g:jedi#smart_auto_mappings=0
"         let g:jedi#use_tabs_not_buffers=1
"         let g:tmuxcomplete#trigger=''
"         " -> Neosnippet
"         " Set information for snippets
"         let g:neosnippet#enable_snipmate_compatibility=1
"         " Use <C-K> to expand or jump snippets in insert mode
"         imap <C-K> <Plug>(neosnippet_expand_or_jump)
"         " Use <C-K> to replace TARGET within snippets in visual mode
"         xmap <C-K> <Plug>(neosnippet_start_unite_snippet_target)
"         " For snippet_complete marker
"         if has('conceal')
"             set conceallevel=2 concealcursor=i
"         endif
"     else
"         " -> UltiSnips
"         let g:UltiSnipsExpandTrigger="<C-K>"
"         let g:UltiSnipsJumpForwardTrigger="<Tab>"
"         let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
"     endif
"
"     " Setting info for snips
"     let g:snips_author=g:ivim_user
"     let g:snips_email=g:ivim_email
"     let g:snips_github=g:ivim_github
"
" endif

" Setting for compiling plugins
if count(g:ivim_bundle_groups, 'compile')

    " -> Syntastic
    let g:syntastic_check_on_open             = 1
    let g:syntastic_aggregate_errors          = 1
    let g:syntastic_auto_jump                 = 1
    let g:syntastic_auto_loc_list             = 1
    if g:ivim_fancy_font
        let g:syntastic_error_symbol          = '✗'
        let g:syntastic_style_error_symbol    = '✠'
        let g:syntastic_warning_symbol        = '∆'
        let g:syntastic_style_warning_symbol  = '≈'
    endif

    " -> Singlecompile
    nnoremap <Leader>r :SingleCompileRun<CR>
    let g:SingleCompile_showquickfixiferror   = 1

endif

" Setting for git plugins
if count(g:ivim_bundle_groups, 'git')
endif

" Setting for language specificity
if count(g:ivim_bundle_groups, 'language')

    " -> Emmet
    let g:user_emmet_leader_key               = '<C-Z>'
    let g:user_emmet_settings                 = {'indentation':'    '}
    let g:use_emmet_complete_tag              = 1

    " -> Polyglot
    let g:vim_markdown_conceal                = 0

endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"--------------------------------------------------
" => Local Setting
"--------------------------------------------------

" Use local vimrc if available
if filereadable(expand($HOME . '/.vimrc.local'))
    source $HOME/.vimrc.local
endif

" Use local gvimrc if available and gui is running
if has('gui_running')
    if filereadable(expand($HOME . '/.gvimrc.local'))
        source $HOME/.gvimrc.local
    endif
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set notermguicolors

" When invoked, unless a starting directory is specified, CtrlP will set its local working directory according to this variable:
let g:ctrlp_working_path_mode                 = 'ra'

" use gitignore files
let g:ctrlp_user_command                      = ['.git', 'cd %s && git ls-files -co --exclude-standard']

" shift + k = search in devdocs.io
let g:investigate_url_for_javascript          = "http://devdocs.io/^s"

let g:vimwiki_list                            = [{'path': '~/Dropbox/DRAFTS/vimwiki/'}]

~/totfiles master*
❯ vim home/.vimrc

~/totfiles master* 34s
❯ ls
Brew                   bitbar-plugins         home                   pygo.py
README.md              build-brew-path-var.sh iterm2                 scripts

~/totfiles master*
❯ diff home/.vimrc ~/.ivim/vimrc
0a1,6
> "       _       _
> "      (_)   __(_)___ ___
> "     / / | / / / __ `__ \
> "    / /| |/ / / / / / / /
> "   /_/ |___/_/_/ /_/ /_/
> "
29a36,38
> let g:ivim_user='Xiao-Ou Zhang' " User name
> let g:ivim_email='kepbod@gmail.com' " User email
> let g:ivim_github='https://github.com/kepbod' " User github
31c40
< let g:ivim_default_scheme                     = 'gruvbox'
---
> let g:ivim_default_scheme='hybrid'
33,34c42,43
< let g:ivim_fancy_font                         = 1 " Enable using fancy font
< " let g:ivim_show_n
---
> let g:ivim_fancy_font=1 " Enable using fancy font
> let g:ivim_show_number=1 " Enable showing number
36c45
< " let g:ivim_autocomplete='NEO'
---
> let g:ivim_autocomplete='NEO'
38c47,48
< let g:ivim_bundle_groups                      = ['ui', 'enhance', 'move', 'navigate', 'git', 'language']
---
> let g:ivim_bundle_groups=['ui', 'enhance', 'move', 'navigate',
>             \'complete', 'compile', 'git', 'language']
53,55c63,65
< let mapleader                                 = ',' " Change the mapleader
< let maplocalleader                            = '\' " Change the maplocalleader
< set timeoutlen                                = 500 " Time to wait for a command
---
> let mapleader=',' " Change the mapleader
> let maplocalleader='\' " Change the maplocalleader
> set timeoutlen=500 " Time to wait for a command
66c76
< set history                                   = 1000 " Increase the lines of history
---
> set history=1000 " Increase the lines of history
68,70c78,80
< set encoding                                  = utf-8 " Set utf-8 encoding
< set completeopt                              += longest " Optimize auto complete
< set completeopt                              += preview " Optimize auto complete
---
> set encoding=utf-8 " Set utf-8 encoding
> set completeopt+=longest " Optimize auto complete
> set completeopt-=preview " Optimize auto complete
76,78c86,88
<     let parent                                = $HOME
<     let prefix                                = '.vim'
<     let dir_list                              = {
---
>     let parent=$HOME
>     let prefix='.vim'
>     let dir_list={
85d94
<
87c96
<         let directory                         = parent.'/'.prefix.'/'.dirname.'/'
---
>         let directory=parent.'/'.prefix.'/'.dirname.'/'
90c99
<                 let dir                       = substitute(directory, "/$", "", "")
---
>                 let dir = substitute(directory, "/$", "", "")
96c105
<         if settingname                       != ''
---
>         if settingname!=''
100d108
<
115c123
<     set runtimepath                           = $HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
---
>     set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
118,119c126,129
< set viewoptions                              += slash,unix " Better Unix/Windows compatibility
< set viewoptions                              -= options " in case of mapping change
---
> set viewoptions+=slash,unix " Better Unix/Windows compatibility
> set viewoptions-=options " in case of mapping change
>
> """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
147,156d156
<     Plug 'vimwiki/vimwiki'
<     Plug 'ctrlpvim/ctrlp.vim'
<     if has('nvim')
<       Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
<     else
<       Plug 'Shougo/deoplete.nvim'
<       Plug 'roxma/nvim-yarp'
<       Plug 'roxma/vim-hug-neovim-rpc'
<     endif
<
159a160
>     Plug 'tpope/vim-speeddating' " Speed dating
179a181
>     Plug 'yuttie/comfortable-motion.vim' " Comfortable motion
189c191
<     " Plug 'mhinz/vim-tmuxify' " Tmux panes
---
>     Plug 'mhinz/vim-tmuxify' " Tmux panes
192,217c194,219
< " if count(g:ivim_bundle_groups, 'complete') " Completion
< "     if g:ivim_autocomplete=='NEO'
< "         if has('lua')
< "             let g:ivim_completion_engine='neocomplete'
< "             Plug 'Shougo/neocomplete.vim' " Auto completion framework
< "         else
< "             let g:ivim_completion_engine='neocomplcache'
< "             Plug 'Shougo/neocomplcache.vim' " Auto completion framework
< "         endif
< "         Plug 'Shougo/neosnippet.vim' " Snippet engine
< "         Plug 'Shougo/neosnippet-snippets' " Snippets
< "         Plug 'Shougo/vimproc.vim', { 'do': 'make' }
< "         Plug 'wellle/tmux-complete.vim' " Completion for tmux panes
< "     else
< "         " Auto completion framework
< "         let g:ivim_completion_engine='YouCompleteMe'
< "         Plug 'Valloric/YouCompleteMe', { 'do': './install.py' } "Auto completion framework
< "         Plug 'honza/vim-snippets' " Snippets
< "         Plug 'sirver/ultisnips' " Snippet engine
< "     endif
< " endif
< "
< " if count(g:ivim_bundle_groups, 'compile') " Compiling
< "     Plug 'scrooloose/syntastic' " Syntax checking
< "     Plug 'xuhdev/SingleCompile' " Single compile
< " endif
---
> if count(g:ivim_bundle_groups, 'complete') " Completion
>     if g:ivim_autocomplete=='NEO'
>         if has('lua')
>             let g:ivim_completion_engine='neocomplete'
>             Plug 'Shougo/neocomplete.vim' " Auto completion framework
>         else
>             let g:ivim_completion_engine='neocomplcache'
>             Plug 'Shougo/neocomplcache.vim' " Auto completion framework
>         endif
>         Plug 'Shougo/neosnippet.vim' " Snippet engine
>         Plug 'Shougo/neosnippet-snippets' " Snippets
>         Plug 'Shougo/vimproc.vim', { 'do': 'make' }
>         Plug 'wellle/tmux-complete.vim' " Completion for tmux panes
>     else
>         " Auto completion framework
>         let g:ivim_completion_engine='YouCompleteMe'
>         Plug 'Valloric/YouCompleteMe', { 'do': './install.py' } "Auto completion framework
>         Plug 'honza/vim-snippets' " Snippets
>         Plug 'sirver/ultisnips' " Snippet engine
>     endif
> endif
>
> if count(g:ivim_bundle_groups, 'compile') " Compiling
>     Plug 'scrooloose/syntastic' " Syntax checking
>     Plug 'xuhdev/SingleCompile' " Single compile
> endif
249c251
<     let g:airline#extensions#tabline#enabled  = 1
---
>     let g:airline#extensions#tabline#enabled=1
253c255
<     set titlestring                           = %t%(\ %m%)%(\ (%{expand('%:p:h')})%)%(\ %a%)
---
>     set titlestring=%t%(\ %m%)%(\ (%{expand('%:p:h')})%)%(\ %a%)
256c258
<     set showtabline                           = 2 " Always show tab line
---
>     set showtabline=2 " Always show tab line
258,259c260,261
<     set guitablabel                           = %m%N:%t[%{tabpagewinnr(v:lnum)}]
<     set tabline                               = %!MyTabLine()
---
>     set guitablabel=%m%N:%t[%{tabpagewinnr(v:lnum)}]
>     set tabline=%!MyTabLine()
261,273c263,275
<         let s                                 = ''
<         let t                                 = tabpagenr() " The index of current page
<         let i                                 = 1
<         while i                              <= tabpagenr('$') " From the first page
<             let buflist                       = tabpagebuflist(i)
<             let winnr                         = tabpagewinnr(i)
<             let s                            .= (i==t ? '%#TabLineSel#' : '%#TabLine#')
<             let s                            .= '%'.i.'T'
<             let s                            .= ' '
<             let bufnr                         = buflist[winnr-1]
<             let file                          = bufname(bufnr)
<             let buftype                       = getbufvar(bufnr, 'buftype')
<             let m                             = ''
---
>         let s=''
>         let t=tabpagenr() " The index of current page
>         let i=1
>         while i<=tabpagenr('$') " From the first page
>             let buflist=tabpagebuflist(i)
>             let winnr=tabpagewinnr(i)
>             let s.=(i==t ? '%#TabLineSel#' : '%#TabLine#')
>             let s.='%'.i.'T'
>             let s.=' '
>             let bufnr=buflist[winnr-1]
>             let file=bufname(bufnr)
>             let buftype = getbufvar(bufnr, 'buftype')
>             let m=''
275c277
<                 let m                         = '[+]'
---
>                 let m='[+]'
277,279c279,281
<             if buftype                       == 'nofile'
<                 if file                      =~ '\/.'
<                     let file                  = substitute(file, '.*\/\ze.', '', '')
---
>             if buftype=='nofile'
>                 if file=~'\/.'
>                     let file=substitute(file, '.*\/\ze.', '', '')
282c284
<                 let file                      = fnamemodify(file, ':p:t')
---
>                 let file=fnamemodify(file, ':p:t')
284,285c286,287
<             if file                          == ''
<                 let file                      = '[No Name]'
---
>             if file==''
>                 let file='[No Name]'
287,292c289,294
<             let s                            .= m
<             let s                            .= i.':'
<             let s                            .= file
<             let s                            .= '['.winnr.']'
<             let s                            .= ' '
<             let i                             = i+1
---
>             let s.=m
>             let s.=i.':'
>             let s.=file
>             let s.='['.winnr.']'
>             let s.=' '
>             let i=i+1
294,295c296,297
<         let s                                .= '%T%#TabLineFill#%='
<         let s                                .= (tabpagenr('$')>1 ? '%999XX' : 'X')
---
>         let s.='%T%#TabLineFill#%='
>         let s.=(tabpagenr('$')>1 ? '%999XX' : 'X')
299,300c301,302
<     if g:ivim_default_scheme                 == 'gruvbox'
<         let g:gruvbox_invert_tabline          = 1
---
>     if g:ivim_default_scheme=='gruvbox'
>         let g:gruvbox_invert_tabline=1
303c305
<     set guitabtooltip                         = %F
---
>     set guitabtooltip=%F
308c310
<     set laststatus                            = 2 " Show the statusline
---
>     set laststatus=2 " Show the statusline
311,319c313,321
<     if g:ivim_default_scheme                 == 'hybrid'
<         let g:airline_theme                   = 'bubblegum'
<     elseif g:ivim_default_scheme             == 'tender'
<         let g:tender_airline                  = 1
<         let g:airline_theme                   = 'tender'
<     endif
<     set ttimeoutlen                           = 50
<     let g:bufferline_echo                     = 0
<     let g:bufferline_modified                 = '[+]'
---
>     if g:ivim_default_scheme=='hybrid'
>         let g:airline_theme='bubblegum'
>     elseif g:ivim_default_scheme=='tender'
>         let g:tender_airline=1
>         let g:airline_theme='tender'
>     endif
>     set ttimeoutlen=50
>     let g:bufferline_echo=0
>     let g:bufferline_modified='[+]'
321c323
<         let g:airline_powerline_fonts         = 1
---
>         let g:airline_powerline_fonts=1
323,324c325,326
<         let g:airline_left_sep                = ''
<         let g:airline_right_sep               = ''
---
>         let g:airline_left_sep=''
>         let g:airline_right_sep=''
330c332
< " autocmd WinEnter * set cursorline
---
> autocmd WinEnter * set cursorline
332c334
< " autocmd InsertLeave * set cursorline
---
> autocmd InsertLeave * set cursorline
334,335c336,337
< set wildmode                                  = list:longest,full " Use powerful wildmenu
< set shortmess                                 = at " Avoids hit enter
---
> set wildmode=list:longest,full " Use powerful wildmenu
> set shortmess=at " Avoids hit enter
338,344c340,346
< set backspace                                 = indent,eol,start " Make backspaces delete sensibly
< set whichwrap                                += h,l,<,>,[,] " Backspace and cursor keys wrap to
< set virtualedit                               = block,onemore " Allow for cursor beyond last character
< set scrolljump                                = 5 " Lines to scroll when cursor leaves screen
< set scrolloff                                 = 3 " Minimum lines to keep above and below cursor
< set sidescroll                                = 1 " Minimal number of columns to scroll horizontally
< set sidescrolloff                             = 10 " Minimal number of screen columns to keep away from cursor
---
> set backspace=indent,eol,start " Make backspaces delete sensibly
> set whichwrap+=h,l,<,>,[,] " Backspace and cursor keys wrap to
> set virtualedit=block,onemore " Allow for cursor beyond last character
> set scrolljump=5 " Lines to scroll when cursor leaves screen
> set scrolloff=3 " Minimum lines to keep above and below cursor
> set sidescroll=1 " Minimal number of columns to scroll horizontally
> set sidescrolloff=10 " Minimal number of screen columns to keep away from cursor
347c349
< set matchtime                                 = 2 " Decrease the time to blink
---
> set matchtime=2 " Decrease the time to blink
355c357
< set formatoptions                            += rnlmM " Optimize format options
---
> set formatoptions+=rnlmM " Optimize format options
357c359
< set textwidth                                 = 80 " Change text width
---
> set textwidth=80 " Change text width
359,360c361,362
<     " set list " Show these tabs and spaces and so on
<     set listchars                             = tab:▸\ ,eol:¬,extends:❯,precedes:❮ " Change listchars
---
>     set list " Show these tabs and spaces and so on
>     set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮ " Change listchars
362,368c364,370
<     " set showbreak=↪  " Change wrap line break
<     " set fillchars=diff:⣿,vert:│ " Change fillchars
<     " augroup trailing " Only show trailing whitespace when not in insert mode
<     "     autocmd!
<     "     autocmd InsertEnter * :set listchars-=trail:⌴
<     "     autocmd InsertLeave * :set listchars+=trail:⌴
<     " augroup END
---
>     set showbreak=↪  " Change wrap line break
>     set fillchars=diff:⣿,vert:│ " Change fillchars
>     augroup trailing " Only show trailing whitespace when not in insert mode
>         autocmd!
>         autocmd InsertEnter * :set listchars-=trail:⌴
>         autocmd InsertLeave * :set listchars+=trail:⌴
>     augroup END
373,374c375,376
<     set guioptions                           -= m
<     set guioptions                           -= T
---
>     set guioptions-=m
>     set guioptions-=T
384c386
< background                                = dark " Set background
---
> set background=dark " Set background
386c388
<     set t_Co                                  = 256 " Use 256 colors
---
>     set t_Co=256 " Use 256 colors
398c400
<     if g:ivim_default_scheme                 == 'hybrid'
---
>     if g:ivim_default_scheme=='hybrid'
400c402
<     elseif g:ivim_default_scheme             == 'gruvbox'
---
>     elseif g:ivim_default_scheme=='gruvbox'
402c404
<     elseif g:ivim_default_scheme             == 'tender'
---
>     elseif g:ivim_default_scheme=='tender'
412c414
<         set guifont                           = Hack:18
---
>         set guifont=DejaVu\ Sans\ Mono\ 18
414c416
<         set guifont                           = Hack:h18
---
>         set guifont=DejaVu\ Sans\ Mono:h18
427,428c429,430
< set softtabstop                               = 2 " Indentation levels every four columns
< set shiftwidth                                = 2 " Indent/outdent by four columns
---
> set softtabstop=4 " Indentation levels every four columns
> set shiftwidth=4 " Indent/outdent by four columns
460,461c462,463
< set foldlevelstart                            = 0 " Start with all folds closed
< set foldcolumn                                = 1 " Set fold column
---
> set foldlevelstart=0 " Start with all folds closed
> set foldcolumn=1 " Set fold column
464c466
< nnoremap <silent> <Space> @                   = (foldlevel('.') ? 'za' : '\<Space>')<CR>
---
> nnoremap <silent> <Space> @=(foldlevel('.') ? 'za' : '\<Space>')<CR>
469,476c471,478
<     let line                                  = getline(v:foldstart)
<     let nucolwidth                            = &foldcolumn+&number*&numberwidth
<     let windowwidth                           = winwidth(0)-nucolwidth-3
<     let foldedlinecount                       = v:foldend-v:foldstart+1
<     let onetab                                = strpart('          ', 0, &tabstop)
<     let line                                  = substitute(line, '\t', onetab, 'g')
<     let line                                  = strpart(line, 0, windowwidth-2-len(foldedlinecount))
<     let fillcharcount                         = windowwidth-len(line)-len(foldedlinecount)
---
>     let line=getline(v:foldstart)
>     let nucolwidth=&foldcolumn+&number*&numberwidth
>     let windowwidth=winwidth(0)-nucolwidth-3
>     let foldedlinecount=v:foldend-v:foldstart+1
>     let onetab=strpart('          ', 0, &tabstop)
>     let line=substitute(line, '\t', onetab, 'g')
>     let line=strpart(line, 0, windowwidth-2-len(foldedlinecount))
>     let fillcharcount=windowwidth-len(line)-len(foldedlinecount)
479c481
< set foldtext                                  = MyFoldText()
---
> set foldtext=MyFoldText()
518c520
< nnoremap <Leader>q :%s/\s\+$//<CR>:let @     /= ''<CR>
---
> nnoremap <Leader>q :%s/\s\+$//<CR>:let @/=''<CR>
521c523
< nnoremap \                                    = gg=G
---
> nnoremap \= gg=G
524c526
< command! DiffOrig vert new | set bt           = nofile | r ++edit # | 0d_
---
> command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_
537,538c539,540
<     let g:startify_session_dir                = $HOME . '/.vim/session'
<     let g:startify_custom_header              = [
---
>     let g:startify_session_dir=$HOME . '/.vim/session'
>     let g:startify_custom_header=[
545c547
<     let g:startify_custom_footer              = ['', '    This configuration is maintained by Xiao-Ou Zhang <kepbod@gmail.com> and other contributors. Thanks!']
---
>     let g:startify_custom_footer=['', '    This configuration is maintained by Xiao-Ou Zhang <kepbod@gmail.com> and other contributors. Thanks!']
547,552c549,554
<         hi StartifyHeader  guifg             =# 87afff
<         hi StartifyFooter  guifg             =# 87afff
<         hi StartifyBracket guifg             =# 585858
<         hi StartifyNumber  guifg             =# ffaf5f
<         hi StartifyPath    guifg             =# 8a8a8a
<         hi StartifySlash   guifg             =# 585858
---
>         hi StartifyHeader  guifg=#87afff
>         hi StartifyFooter  guifg=#87afff
>         hi StartifyBracket guifg=#585858
>         hi StartifyNumber  guifg=#ffaf5f
>         hi StartifyPath    guifg=#8a8a8a
>         hi StartifySlash   guifg=#585858
554,559c556,561
<         hi StartifyHeader  ctermfg            = 111
<         hi StartifyFooter  ctermfg            = 111
<         hi StartifyBracket ctermfg            = 240
<         hi StartifyNumber  ctermfg            = 215
<         hi StartifyPath    ctermfg            = 245
<         hi StartifySlash   ctermfg            = 240
---
>         hi StartifyHeader  ctermfg=111
>         hi StartifyFooter  ctermfg=111
>         hi StartifyBracket ctermfg=240
>         hi StartifyNumber  ctermfg=215
>         hi StartifyPath    ctermfg=245
>         hi StartifySlash   ctermfg=240
572,574c574,576
<     let delimitMate_expand_cr                 = 1
<     let delimitMate_expand_space              = 1
<     let delimitMate_balance_matchpairs        = 1
---
>     let delimitMate_expand_cr=1
>     let delimitMate_expand_space=1
>     let delimitMate_balance_matchpairs=1
579c581
<         if (getline('.')                     =~ '^$')
---
>         if (getline('.')=~'^$')
591a594,613
>     " -> Multiple cursors
>     " Called once right before you start selecting multiple cursors
>     if g:ivim_autocomplete=='NEO'
>         function! Multiple_cursors_before()
>             if g:ivim_completion_engine=='neocomplete'
>                 exe 'NeoCompleteLock'
>             else
>                 exe 'NeoComplCacheLock'
>             endif
>         endfunction
>         " Called once only when the multiple selection is canceled (default <Esc>)
>         function! Multiple_cursors_after()
>             if g:ivim_completion_engine=='neocomplete'
>                 exe 'NeoCompleteUnlock'
>             else
>                 exe 'NeoComplCacheUnlock'
>             endif
>         endfunction
>     endif
>
594c616
<     let g:undotree_SetFocusWhenToggle         = 1
---
>     let g:undotree_SetFocusWhenToggle=1
601c623
<     let g:gutentags_cache_dir                 = $HOME . '/.vim/cache/ctags'
---
>     let g:gutentags_cache_dir=$HOME . '/.vim/cache/ctags'
604,607c626,629
<     let g:splitjoin_split_mapping             = ',s'
<     let g:splitjoin_join_mapping              = ',j'
<     let g:splitjoin_normalize_whitespace      = 1
<     let g:splitjoin_align                     = 1
---
>     let g:splitjoin_split_mapping = ',s'
>     let g:splitjoin_join_mapping  = ',j'
>     let g:splitjoin_normalize_whitespace=1
>     let g:splitjoin_align=1
611,612c633
<     " let g:investigate_use_dash=1
<
---
>     let g:investigate_use_dash=1
615c636
<     let &diffexpr                             = 'EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'
---
>     let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'
624,627c645,648
<     let g:tagbar_autofocus                    = 1
<     let g:tagbar_expand                       = 1
<     let g:tagbar_foldlevel                    = 2
<     let g:tagbar_autoshowtag                  = 1
---
>     let g:tagbar_autofocus=1
>     let g:tagbar_expand=1
>     let g:tagbar_foldlevel=2
>     let g:tagbar_autoshowtag=1
643,646c664,667
<     let NERDTreeChDirMode                     = 2
<     let NERDTreeShowBookmarks                 = 1
<     let NERDTreeShowHidden                    = 1
<     let NERDTreeShowLineNumbers               = 1
---
>     let NERDTreeChDirMode=2
>     let NERDTreeShowBookmarks=1
>     let NERDTreeShowHidden=1
>     let NERDTreeShowLineNumbers=1
660,729c681,751
< " if count(g:ivim_bundle_groups, 'complete')
< "     if g:ivim_autocomplete=='NEO'
< "         " -> Neocomplete & Neocomplcache
< "         " Use Tab and S-Tab to select candidate
< "         inoremap <expr><Tab>  pumvisible() ? "\<C-N>" : "\<Tab>"
< "         inoremap <expr><S-Tab> pumvisible() ? "\<C-P>" : "\<S-Tab>"
< "         if g:ivim_completion_engine=='neocomplete'
< "             let g:neocomplete#enable_at_startup=1
< "             let g:neocomplete#data_directory=$HOME . '/.vim/cache/neocomplete'
< "             let g:neocomplete#enable_auto_delimiter=1
< "             " Use <C-E> to close popup
< "             inoremap <expr><C-E> neocomplete#cancel_popup()
< "             inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
< "                         \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
< "                         \ pumvisible() ? neocomplete#close_popup() : "\<CR>"
< "         else
< "             let g:neocomplcache_enable_at_startup=1
< "             let g:neocomplcache_temporary_dir=$HOME . '/.vim/cache/neocomplcache'
< "             let g:neocomplcache_enable_auto_delimiter=1
< "             let g:neocomplcache_enable_fuzzy_completion=1
< "             " Use <C-E> to close popup
< "             inoremap <expr><C-E> neocomplcache#cancel_popup()
< "             inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
< "                         \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
< "                         \ pumvisible() ? neocomplcache#close_popup() : "\<CR>"
< "         endif
< "         " Setting for specific language
< "         if has('lua')
< "             if !exists('g:neocomplete#force_omni_input_patterns')
< "                 let g:neocomplete#force_omni_input_patterns={}
< "             endif
< "             let g:neocomplete#force_omni_input_patterns.python=
< "             \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
< "         else
< "             if !exists('g:neocomplcache_force_omni_patterns')
< "                 let g:neocomplcache_force_omni_patterns={}
< "             endif
< "             let g:neocomplcache_force_omni_patterns.python=
< "             \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
< "         endif
< "         autocmd FileType python setlocal omnifunc=jedi#completions
< "         let g:jedi#completions_enabled=0
< "         let g:jedi#auto_vim_configuration=0
< "         let g:jedi#smart_auto_mappings=0
< "         let g:jedi#use_tabs_not_buffers=1
< "         let g:tmuxcomplete#trigger=''
< "         " -> Neosnippet
< "         " Set information for snippets
< "         let g:neosnippet#enable_snipmate_compatibility=1
< "         " Use <C-K> to expand or jump snippets in insert mode
< "         imap <C-K> <Plug>(neosnippet_expand_or_jump)
< "         " Use <C-K> to replace TARGET within snippets in visual mode
< "         xmap <C-K> <Plug>(neosnippet_start_unite_snippet_target)
< "         " For snippet_complete marker
< "         if has('conceal')
< "             set conceallevel=2 concealcursor=i
< "         endif
< "     else
< "         " -> UltiSnips
< "         let g:UltiSnipsExpandTrigger="<C-K>"
< "         let g:UltiSnipsJumpForwardTrigger="<Tab>"
< "         let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
< "     endif
< "
< "     " Setting info for snips
< "     let g:snips_author=g:ivim_user
< "     let g:snips_email=g:ivim_email
< "     let g:snips_github=g:ivim_github
< "
< " endif
---
> if count(g:ivim_bundle_groups, 'complete')
>
>     if g:ivim_autocomplete=='NEO'
>         " -> Neocomplete & Neocomplcache
>         " Use Tab and S-Tab to select candidate
>         inoremap <expr><Tab>  pumvisible() ? "\<C-N>" : "\<Tab>"
>         inoremap <expr><S-Tab> pumvisible() ? "\<C-P>" : "\<S-Tab>"
>         if g:ivim_completion_engine=='neocomplete'
>             let g:neocomplete#enable_at_startup=1
>             let g:neocomplete#data_directory=$HOME . '/.vim/cache/neocomplete'
>             let g:neocomplete#enable_auto_delimiter=1
>             " Use <C-E> to close popup
>             inoremap <expr><C-E> neocomplete#cancel_popup()
>             inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
>                         \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
>                         \ pumvisible() ? neocomplete#close_popup() : "\<CR>"
>         else
>             let g:neocomplcache_enable_at_startup=1
>             let g:neocomplcache_temporary_dir=$HOME . '/.vim/cache/neocomplcache'
>             let g:neocomplcache_enable_auto_delimiter=1
>             let g:neocomplcache_enable_fuzzy_completion=1
>             " Use <C-E> to close popup
>             inoremap <expr><C-E> neocomplcache#cancel_popup()
>             inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
>                         \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
>                         \ pumvisible() ? neocomplcache#close_popup() : "\<CR>"
>         endif
>         " Setting for specific language
>         if has('lua')
>             if !exists('g:neocomplete#force_omni_input_patterns')
>                 let g:neocomplete#force_omni_input_patterns={}
>             endif
>             let g:neocomplete#force_omni_input_patterns.python=
>             \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
>         else
>             if !exists('g:neocomplcache_force_omni_patterns')
>                 let g:neocomplcache_force_omni_patterns={}
>             endif
>             let g:neocomplcache_force_omni_patterns.python=
>             \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
>         endif
>         autocmd FileType python setlocal omnifunc=jedi#completions
>         let g:jedi#completions_enabled=0
>         let g:jedi#auto_vim_configuration=0
>         let g:jedi#smart_auto_mappings=0
>         let g:jedi#use_tabs_not_buffers=1
>         let g:tmuxcomplete#trigger=''
>         " -> Neosnippet
>         " Set information for snippets
>         let g:neosnippet#enable_snipmate_compatibility=1
>         " Use <C-K> to expand or jump snippets in insert mode
>         imap <C-K> <Plug>(neosnippet_expand_or_jump)
>         " Use <C-K> to replace TARGET within snippets in visual mode
>         xmap <C-K> <Plug>(neosnippet_start_unite_snippet_target)
>         " For snippet_complete marker
>         if has('conceal')
>             set conceallevel=2 concealcursor=i
>         endif
>     else
>         " -> UltiSnips
>         let g:UltiSnipsExpandTrigger="<C-K>"
>         let g:UltiSnipsJumpForwardTrigger="<Tab>"
>         let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
>     endif
>
>     " Setting info for snips
>     let g:snips_author=g:ivim_user
>     let g:snips_email=g:ivim_email
>     let g:snips_github=g:ivim_github
>
> endif
735,738c757,760
<     let g:syntastic_check_on_open             = 1
<     let g:syntastic_aggregate_errors          = 1
<     let g:syntastic_auto_jump                 = 1
<     let g:syntastic_auto_loc_list             = 1
---
>     let g:syntastic_check_on_open=1
>     let g:syntastic_aggregate_errors=1
>     let g:syntastic_auto_jump=1
>     let g:syntastic_auto_loc_list=1
 ~/.i/vimrc+   h/.vimrc                                                                    buffers
   786 ¬                                                        │  34 ¬
   787 """""""""""""""""""""""""""""""""""""""""""""""""""""""""│  35 " ivim user setting¬
       ↪"""""""¬                                                │  36 let g:ivim_user='Xiao-Ou Zhang' " ❯
   788 ¬                                                        │  37 let g:ivim_email='kepbod@gmail.com❯
   789 set notermguicolors¬                                     │  38 let g:ivim_github='https://github.❯
   790 ¬                                                        │  39 " ivim color settings (hybrid, gru❯
   791 " When invoked, unless a starting directory is           │  40 let g:ivim_default_scheme='hybrid'¬
       ↪specified, CtrlP will set its local working directory   │  41 " ivim ui setting¬
       ↪according to this variable:¬                            │  42 let g:ivim_fancy_font=1 " Enable u❯
   792 let g:ctrlp_working_path_mode                 = 'ra'¬    │  43 let g:ivim_show_number=1 " Enable ❯
   793 ¬                                                        │  44 " ivim autocomplete setting (YCM o❯
   794 " use gitignore files¬                                   │  45 let g:ivim_autocomplete='NEO'¬
   795 let g:ctrlp_user_command                      = ['.git', │  46 " ivim plugin setting¬
       ↪'cd %s && git ls-files -co --exclude-standard']¬        │  47 let g:ivim_bundle_groups=['ui', 'e❯
   796 ¬                                                        │  48     ¦   ¦   \'complete', 'compile'❯
   797 " shift + k = search in devdocs.io¬                      │  49 ¬
   798 let g:investigate_url_for_javascript          = "http:// │  50 " Customise ivim settings for pers❯
       ↪devdocs.io/^s"¬                                         │  51 if filereadable(expand($HOME . '/.❯
   799 ¬                                                        │  52     source $HOME/.vimrc.ivim.local¬
   800 let g:vimwiki_list                            =          │  53 endif¬
       ↪[{'path': '~/Dropbox/DRAFTS/vimwiki/'}]¬                │  54 ¬
~                                                               │  55 ¬
~                                                               │  56 ¬
~                                                               │  57 """"""""""""""""""""""""""""""""""❯
~                                                               │  58 ¬
~                                                               │  59 "---------------------------------❯
~                                                               │  60 " => General¬
~                                                               │  61 "---------------------------------❯
~                                                               │  62 ¬
~                                                               │  63 set nocompatible " Get out of vi c❯
~                                                               │  64 filetype plugin indent on " Enable❯
~                                                               │  65 let mapleader=',' " Change the map❯
~                                                               │  66 let maplocalleader='\' " Change th❯
~                                                               │  67 set timeoutlen=500 " Time to wait ❯
~                                                               │  68 ¬
~                                                               │  69 " Source the vimrc file after savi❯
~                                                               │  70 autocmd BufWritePost $MYVIMRC sour❯
~                                                               │  71 " Fast edit the .vimrc file using ❯
~                                                               │  72 nnoremap <Leader>x :tabedit $MYVIM❯
~                                                               │  73 ¬
~                                                               │  74 set autoread " Set autoread when a❯
~                                                               │  75 set autowrite " Write on make/shel❯
~                                                               │  76 set hidden " Turn on hidden"¬
~                                                               │  77 ¬
~                                                               │  78 set history=1000 " Increase the li❯
~                                                               │  79 set modeline " Turn on modeline¬
~                                                               │  80 set encoding=utf-8 " Set utf-8 enc❯
~                                                               │  81 set completeopt+=longest " Optimiz❯
~                                                               │  82 set completeopt-=preview " Optimiz❯
~                                                               │  83 ¬
~                                                               │  84 set undofile " Set undo¬
~                                                               │  85 ¬
~                                                               │  86 " Set directories¬
~                                                               │  87 function! InitializeDirectories()¬
 N…  <mrc     nerd_loader  vim     98% ☰  789/800  :  1    1:vimrc[+]  2:.vimrc               
"~/totfiles/home/.vimrc" 800L, 29609C
 ~/.i/vimrc   h/.vimrc   /u/l/C/m/8/M/C/R/v/r/d/motion.txt                                                                                                                                          buffers
     1 "   Main Contributor: Xiao-Ou Zhang (kepbod) <kepbod@gmail.com>¬         │     1 "       _       _¬
     2 "   Version: 3.0¬                                                        │     2 "      (_)   __(_)___ ___¬
     3 "   Created: 2012-01-20¬                                                 │     3 "     / / | / / / __ `__ \¬
     4 "   Last Modified: 2016-12-29¬                                           │     4 "    / /| |/ / / / / / / /¬
     5 "¬                                                                       │     5 "   /_/ |___/_/_/ /_/ /_/¬
     6 "   Sections:¬                                                           │     6 "¬
     7 "     -> ivim Setting¬                                                   │     7 "   Main Contributor: Xiao-Ou Zhang (kepbod) <kepbod@gmail.com>¬
     8 "     -> General¬                                                        │     8 "   Version: 3.0¬
     9 "     -> Platform Specific Setting¬                                      │     9 "   Created: 2012-01-20¬
    10 "     -> Vim-plug¬                                                       │    10 "   Last Modified: 2016-12-29¬
    11 "     -> User Interface¬                                                 │    11 "¬
    12 "     -> Colors and Fonts¬                                               │    12 "   Sections:¬
    13 "     -> Indent Related¬                                                 │    13 "     -> ivim Setting¬
    14 "     -> Search Related¬                                                 │    14 "     -> General¬
    15 "     -> Fold Related¬                                                   │    15 "     -> Platform Specific Setting¬
    16 "     -> Key Mapping¬                                                    │    16 "     -> Vim-plug¬
    17 "     -> Plugin Setting¬                                                 │    17 "     -> User Interface¬
    18 "     -> Local Setting¬                                                  │    18 "     -> Colors and Fonts¬
    19 "¬                                                                       │    19 "     -> Indent Related¬
    20 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""¬        │    20 "     -> Search Related¬
    21 ¬                                                                        │    21 "     -> Fold Related¬
    22 ¬                                                                        │    22 "     -> Key Mapping¬
    23 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""¬        │    23 "     -> Plugin Setting¬
    24 ¬                                                                        │    24 "     -> Local Setting¬
    25 "------------------------------------------------¬                       │    25 "¬
    26 " => ivim Setting¬                                                       │    26 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""¬
    27 "------------------------------------------------¬                       │    27 ¬
    28 ¬                                                                        │    28 ¬
    29 " ivim user setting¬                                                     │    29 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""¬
    30 " ivim color settings (hybrid, gruvbox or tender)¬                       │    30 ¬
    31 let g:ivim_default_scheme                     = 'gruvbox'¬               │    31 "------------------------------------------------¬
    32 " ivim ui setting¬                                                       │    32 " => ivim Setting¬
    33 let g:ivim_fancy_font                         = 1 " Enable using fancy f❯│    33 "------------------------------------------------¬
    34 " let g:ivim_show_n¬                                                     │    34 ¬
    35 " ivim autocomplete setting (YCM or NEO)¬                                │ _  35 " ivim user setting¬
    36 " let g:ivim_autocomplete='NEO'¬                                         │    36 " ivim color settings (hybrid, gruvbox or tender)¬
    37 " ivim plugin setting¬                                                   │ ~  37 let g:ivim_default_scheme                     = 'gruvbox'¬
    38 let g:ivim_bundle_groups                      = ['ui', 'enhance', 'move'❯│    38 " ivim ui setting¬
    39 ¬                                                                        │ ~  39 let g:ivim_fancy_font                         = 1 " Enable using fancy font¬
    40 " Customise ivim settings for personal usage¬                            │ ~  40 " let g:ivim_show_n¬
    41 if filereadable(expand($HOME . '/.vimrc.ivim.local'))¬                   │    41 " ivim autocomplete setting (YCM or NEO)¬
    42     source $HOME/.vimrc.ivim.local¬                                      │ ~  42 " let g:ivim_autocomplete='NEO'¬
    43 endif¬                                                                   │    43 " ivim plugin setting¬
 _  44 ¬                                                                        │ ~  44 let g:ivim_bundle_groups                      = ['ui', 'enhance', 'move', 'navigate', 'git', 'language']¬
    45 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""¬        │ ~  45 let g:ivim_autocomplete='NEO'¬
    46 ¬                                                                        │    46 ¬
    47 "------------------------------------------------¬                       │    47 " Customise ivim settings for personal usage¬
    48 " => General¬                                                            │    48 if filereadable(expand($HOME . '/.vimrc.ivim.local'))¬
    49 "------------------------------------------------¬                       │    49     source $HOME/.vimrc.ivim.local¬
    50 ¬                                                                        │    50 endif¬
    51 set nocompatible " Get out of vi compatible mode¬                        │    51 ¬
    52 filetype plugin indent on " Enable filetype¬                             │    52 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""¬
    53 let mapleader                                 = ',' " Change the maplead❯│    53 ¬
    54 let maplocalleader                            = '\' " Change the maploca❯│    54 "------------------------------------------------¬
  1:vimrc   2:.vimrc               vim     utf-8      3% ☰   28/800  :  1   NORMAL  +0 ~6 -3  master⚡   1:vimrc   2:.vimrc                           vim      0% ☰    1/806  :  1  ☲ [582]trailing 
:call investigate#Investigate()
 ~/.i/vimrc+                                                                                 buffers
  34 ¬
740,743c762,765
<         let g:syntastic_error_symbol          = '✗'
<         let g:syntastic_style_error_symbol    = '✠'
<         let g:syntastic_warning_symbol        = '∆'
<         let g:syntastic_style_warning_symbol  = '≈'
---
>         let g:syntastic_error_symbol = '✗'
>         let g:syntastic_style_error_symbol = '✠'
>         let g:syntastic_warning_symbol = '∆'
>         let g:syntastic_style_warning_symbol = '≈'
748c770
<     let g:SingleCompile_showquickfixiferror   = 1
---
>     let g:SingleCompile_showquickfixiferror=1
760,762c782,784
<     let g:user_emmet_leader_key               = '<C-Z>'
<     let g:user_emmet_settings                 = {'indentation':'    '}
<     let g:use_emmet_complete_tag              = 1
---
>     let g:user_emmet_leader_key='<C-Z>'
>     let g:user_emmet_settings={'indentation':'    '}
>     let g:use_emmet_complete_tag=1
765c787
<     let g:vim_markdown_conceal                = 0
---
>     let g:vim_markdown_conceal=0
788,800d809
<
                                                                                                                                                                                                          buffers

    ¦  _       _
    ¦ (_)   __(_)___ ___
    ¦/ / | / / / __ `__ \
    / /| |/ / / / / / / /
   /_/ |___/_/_/ /_/ /_/
    ¦   ¦   ¦   ¦   ¦   ¦

   [e]  <empty buffer>

   MRU

   [0]  ~/.ivim/vimrc
   [1]  ~/totfiles/home/.vimrc
   [2]  ~/Local
   [3]  ~/.vimrc
   [4]  ~/.zshrc
   [5]  ~/.freshrc
   [6]  ~/.zprezto/init.zsh
   [7]  ~/setup.sh
   [8]  ~/cipherchase/.babelrc
   [9]  ~/.config/nvim/init.vim

   MRU /Users/tyler/totfiles

   [10] home/.vimrc

   [q]  <quit>


    This configuration is maintained by Xiao-Ou Zhang <kepbod@gmail.com> and other contributors. Thanks!
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
~
 startify 
:so ~/totfiles/home/.vimrc
.vimrc        .vimrc.local
Error detected while processing /Users/tyler/totfiles/home/.vimrc:
line   55:
E521: Number required after =: timeoutlen                                =
line   66:
E521: Number required after =: history                                   =
line   68:
E474: Invalid argument: encoding                                  =
line   69:
E518: Unknown option: longest
line   70:
E518: Unknown option: preview
line  118:
E518: Unknown option: slash,unix
line  119:
E518: Unknown option: options
line  308:
E521: Number required after =: laststatus                            =
line  334:
E474: Invalid argument: list:longest,full
line  335:
E518: Unknown option: at
line  338:
E518: Unknown option: indent,eol,start
line  339:
E518: Unknown option: h,l,<,>,[,]
line  340:
E518: Unknown option: block,onemore
line  341:
E521: Number required after =: scrolljump                                =
line  342:
E521: Number required after =: scrolloff                                 =
line  343:
E521: Number required after =: sidescroll                                =
line  344:
E521: Number required after =: sidescrolloff                             =
line  347:
E521: Number required after =: matchtime                                 =
line  349:
E121: Undefined variable: g:ivim_show_number
line  355:
E518: Unknown option: rnlmM
line  357:
E521: Number required after =: textwidth                                 =
line  360:
E518: Unknown option: tab:▸\ ,eol:¬,extends:❯,precedes:❮
line  384:
E492: Not an editor command: background                                = dark " Set background
line  386:
E518: Unknown option: 256
line  427:
E521: Number required after =: softtabstop                               =
line  428:
E521: Number required after =: shiftwidth                                =
line  460:
E521: Number required after =: foldlevelstart                            =
line  461:
E521: Number required after =: foldcolumn                                =
line  479:
E518: Unknown option: MyFoldText()
Interrupted
< set notermguicolors
<
< " When invoked, unless a starting directory is specified, CtrlP will set its local working directory according to this variable:
< let g:ctrlp_working_path_mode                 = 'ra'
<
< " use gitignore files
< let g:ctrlp_user_command                      = ['.git', 'cd %s && git ls-files -co --exclude-standard']
<
< " shift + k = search in devdocs.io
< let g:investigate_url_for_javascript          = "http://devdocs.io/^s"
<
< let g:vimwiki_list                            = [{'path': '~/Dropbox/DRAFTS/vimwiki/'}]

~/totfiles master*
❯

~/totfiles master*
❯ code .

~/totfiles master*
❯ ls
Brew                   bitbar-plugins         home                   pygo.py
README.md              build-brew-path-var.sh iterm2                 scripts

~/totfiles master*
❯ vim ~/.ivim/vimrc

~/totfiles master* 4m 1s
❯ ls
Brew                   README.md              bitbar-plugins         build-brew-path-var.sh home                   iterm2                 pygo.py                scripts

~/totfiles master*
❯ source ~/totfiles/home/.vimrc
/Users/tyler/totfiles/home/.vimrc:1: command not found:    Main Contributor: Xiao-Ou Zhang (kepbod) <kepbod@gmail.com>\n
/Users/tyler/totfiles/home/.vimrc:3: command not found:    Created: 2012-01-20\n
/Users/tyler/totfiles/home/.vimrc:5: command not found: \n
/Users/tyler/totfiles/home/.vimrc:7: command not found:      -> ivim Setting\n
/Users/tyler/totfiles/home/.vimrc:9: command not found:      -> Platform Specific Setting\n
/Users/tyler/totfiles/home/.vimrc:11: command not found:      -> User Interface\n
/Users/tyler/totfiles/home/.vimrc:13: command not found:      -> Indent Related\n
diff --git a/vimrc b/vimrc
index 878d9be..8690d86 100644
--- a/vimrc
+++ b/vimrc
@@ -1,51 +1,17 @@
-"       _       _
-"      (_)   __(_)___ ___
-"     / / | / / / __ `__ \
-"    / /| |/ / / / / / / /
-"   /_/ |___/_/_/ /_/ /_/
-"
-"   Main Contributor: Xiao-Ou Zhang (kepbod) <kepbod@gmail.com>
-"   Version: 3.0
-"   Created: 2012-01-20
-"   Last Modified: 2016-12-29
-"
-"   Sections:
-"     -> ivim Setting
-"     -> General
-"     -> Platform Specific Setting
-"     -> Vim-plug
-"     -> User Interface
-"     -> Colors and Fonts
-"     -> Indent Related
-"     -> Search Related
-"     -> Fold Related
-"     -> Key Mapping
-"     -> Plugin Setting
-"     -> Local Setting
-"
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
-
-"------------------------------------------------
 " => ivim Setting
 "------------------------------------------------

 " ivim user setting
-let g:ivim_user='Xiao-Ou Zhang' " User name
-let g:ivim_email='kepbod@gmail.com' " User email
-let g:ivim_github='https://github.com/kepbod' " User github
 " ivim color settings (hybrid, gruvbox or tender)
-let g:ivim_default_scheme='hybrid'
+let g:ivim_default_scheme                     = 'gruvbox'
 " ivim ui setting
-let g:ivim_fancy_font=1 " Enable using fancy font
-let g:ivim_show_number=1 " Enable showing number
+let g:ivim_fancy_font                         = 1 " Enable using fancy font
+" let g:ivim_show_n
 " ivim autocomplete setting (YCM or NEO)
-let g:ivim_autocomplete='NEO'
+" let g:ivim_autocomplete='NEO'
 " ivim plugin setting
-let g:ivim_bundle_groups=['ui', 'enhance', 'move', 'navigate',
-            \'complete', 'compile', 'git', 'language']
+let g:ivim_bundle_groups                      = ['ui', 'enhance', 'move', 'navigate', 'git', 'language']
+let g:ivim_autocomplete='NEO'

 " Customise ivim settings for personal usage
 if filereadable(expand($HOME . '/.vimrc.ivim.local'))
@@ -131,13 +97,6 @@ set viewoptions-=options " in case of mapping change
 "--------------------------------------------------
 " => Vim-plug
 "--------------------------------------------------
-
-if empty(glob('~/.vim/autoload/plug.vim'))
-    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
-                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
-    autocmd VimEnter * PlugInstall | source $MYVIMRC
-endif
-
 call plug#begin('~/.vim/bundle')

 if count(g:ivim_bundle_groups, 'ui') " UI setting
@@ -154,10 +113,19 @@ if count(g:ivim_bundle_groups, 'ui') " UI setting
 endif

 if count(g:ivim_bundle_groups, 'enhance') " Vim enhancement
+    Plug 'vimwiki/vimwiki'
+    Plug 'ctrlpvim/ctrlp.vim'
+    if has('nvim')
+      Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
+    else
+      Plug 'Shougo/deoplete.nvim'
+      Plug 'roxma/nvim-yarp'
+      Plug 'roxma/vim-hug-neovim-rpc'
+    endif
+
     Plug 'Raimondi/delimitMate' " Closing of quotes
     Plug 'tomtom/tcomment_vim' " Commenter
     Plug 'tpope/vim-abolish' " Abolish
-    Plug 'tpope/vim-speeddating' " Speed dating
     Plug 'tpope/vim-repeat' " Repeat
     Plug 'terryma/vim-multiple-cursors' " Multiple cursors
     Plug 'junegunn/vim-slash' " In-buffer search
@@ -178,7 +146,6 @@ if count(g:ivim_bundle_groups, 'move') " Moving
     Plug 'tpope/vim-unimpaired' " Pairs of mappings
     Plug 'Lokaltog/vim-easymotion' " Easy motion
     Plug 'kepbod/quick-scope' " Quick scope
-    Plug 'yuttie/comfortable-motion.vim' " Comfortable motion
     Plug 'bkad/CamelCaseMotion' " Camel case motion
     Plug 'majutsushi/tagbar' " Tag bar
/Users/tyler/totfiles/home/.vimrc:15: command not found:      -> Fold Related\n
/Users/tyler/totfiles/home/.vimrc:17: command not found:      -> Plugin Setting\n
/Users/tyler/totfiles/home/.vimrc:19: command not found: \n\n\n\n\n\n------------------------------------------------
/Users/tyler/totfiles/home/.vimrc:26: command not found:  => ivim Setting\n------------------------------------------------
/Users/tyler/totfiles/home/.vimrc:29: unknown file attribute: h
/Users/tyler/totfiles/home/.vimrc:31: bad math expression: ':' without '?'
/Users/tyler/totfiles/home/.vimrc:32: command not found:  ivim ui setting\nlet g:ivim_fancy_font                         = 1
/Users/tyler/totfiles/home/.vimrc:34: number expected
/Users/tyler/totfiles/home/.vimrc:36: command not found:  let g:ivim_autocomplete='NEO'\n
/Users/tyler/totfiles/home/.vimrc:38: bad pattern: [ui,

~/totfiles master*
❯ vim
Error detected while processing /Users/tyler/.ivim/vimrc:
line  318:
diff --git a/vimrc b/vimrc
index 878d9be..b107f13 100644
--- a/vimrc
+++ b/vimrc
@@ -1,9 +1,3 @@
-"       _       _
-"      (_)   __(_)___ ___
-"     / / | / / / __ `__ \
-"    / /| |/ / / / / / / /
-"   /_/ |___/_/_/ /_/ /_/
-"
 "   Main Contributor: Xiao-Ou Zhang (kepbod) <kepbod@gmail.com>
 "   Version: 3.0
 "   Created: 2012-01-20
@@ -33,19 +27,15 @@
 "------------------------------------------------

 " ivim user setting
-let g:ivim_user='Xiao-Ou Zhang' " User name
-let g:ivim_email='kepbod@gmail.com' " User email
-let g:ivim_github='https://github.com/kepbod' " User github
 " ivim color settings (hybrid, gruvbox or tender)
-let g:ivim_default_scheme='hybrid'
+let g:ivim_default_scheme                     = 'gruvbox'
 " ivim ui setting
-let g:ivim_fancy_font=1 " Enable using fancy font
-let g:ivim_show_number=1 " Enable showing number
+let g:ivim_fancy_font                         = 1 " Enable using fancy font
+" let g:ivim_show_n
 " ivim autocomplete setting (YCM or NEO)
-let g:ivim_autocomplete='NEO'
+" let g:ivim_autocomplete='NEO'
 " ivim plugin setting
-let g:ivim_bundle_groups=['ui', 'enhance', 'move', 'navigate',
-            \'complete', 'compile', 'git', 'language']
+let g:ivim_bundle_groups                      = ['ui', 'enhance', 'move', 'navigate', 'git', 'language']

 " Customise ivim settings for personal usage
 if filereadable(expand($HOME . '/.vimrc.ivim.local'))
@@ -60,9 +50,9 @@ endif

 set nocompatible " Get out of vi compatible mode
 filetype plugin indent on " Enable filetype
-let mapleader=',' " Change the mapleader
-let maplocalleader='\' " Change the maplocalleader
-set timeoutlen=500 " Time to wait for a command
+let mapleader                                 = ',' " Change the mapleader
+let maplocalleader                            = '\' " Change the maplocalleader
+set timeoutlen                                = 500 " Time to wait for a command

 " Source the vimrc file after saving it
 autocmd BufWritePost $MYVIMRC source $MYVIMRC
@@ -73,39 +63,41 @@ set autoread " Set autoread when a file is changed outside
 set autowrite " Write on make/shell commands
 set hidden " Turn on hidden"

-set history=1000 " Increase the lines of history
+set history                                   = 1000 " Increase the lines of history
 set modeline " Turn on modeline
-set encoding=utf-8 " Set utf-8 encoding
-set completeopt+=longest " Optimize auto complete
-set completeopt-=preview " Optimize auto complete
+set encoding                                  = utf-8 " Set utf-8 encoding
+set completeopt                              += longest " Optimize auto complete
+set completeopt                              += preview " Optimize auto complete

 set undofile " Set undo

 " Set directories
 function! InitializeDirectories()
-    let parent=$HOME
-    let prefix='.vim'
-    let dir_list={
+    let parent                                = $HOME
+    let prefix                                = '.vim'
+    let dir_list                              = {
                 \ 'backup': 'backupdir',
                 \ 'view': 'viewdir',
                 \ 'swap': 'directory',
                 \ 'undo': 'undodir',
                 \ 'cache': '',
                 \ 'session': ''}
+
     for [dirname, settingname] in items(dir_list)
-        let directory=parent.'/'.prefix.'/'.dirname.'/'
+        let directory                         = parent.'/'.prefix.'/'.dirname.'/'
         if !isdirectory(directory)
             if exists('*mkdir')
-                let dir = substitute(directory, "/$", "", "")
+                let dir                       = substitute(directory, "/$", "", "")
                 call mkdir(dir, 'p')
             else
                 echo 'Warning: Unable to create directory: '.directory
             endif
         endif
-        if settingname!=''
+        if settingname                       != ''
             exe 'set '.settingname.'='.directory
         endif
     endfor
+
 endfunction
 call InitializeDirectories()

@@ -120,13 +112,11 @@ autocmd BufWinEnter *.* silent! loadview " Make Vim load view (state) (folds, cu

 " On Windows, also use .vim instead of vimfiles
 if has('win32') || has('win64')
-    set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
+    set runtimepath                           = $HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
 endif

-set viewoptions+=slash,unix " Better Unix/Windows compatibility
-set viewoptions-=options " in case of mapping change
-
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+set viewoptions                              += slash,unix " Better Unix/Windows compatibility
+set viewoptions                              -= options " in case of mapping change

 "--------------------------------------------------
 " => Vim-plug
@@ -154,10 +144,19 @@ if count(g:ivim_bundle_groups, 'ui') " UI setting
 endif

 if count(g:ivim_bundle_groups, 'enhance') " Vim enhancement
+    Plug 'vimwiki/vimwiki'
+    Plug 'ctrlpvim/ctrlp.vim'
+    if has('nvim')
+      Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
+    else
+      Plug 'Shougo/deoplete.nvim'
+      Plug 'roxma/nvim-yarp'
+      Plug 'roxma/vim-hug-neovim-rpc'
+    endif
+
     Plug 'Raimondi/delimitMate' " Closing of quotes
     Plug 'tomtom/tcomment_vim' " Commenter
     Plug 'tpope/vim-abolish' " Abolish
-    Plug 'tpope/vim-speeddating' " Speed dating
     Plug 'tpope/vim-repeat' " Repeat
     Plug 'terryma/vim-multiple-cursors' " Multiple cursors
     Plug 'junegunn/vim-slash' " In-buffer search
@@ -178,7 +177,6 @@ if count(g:ivim_bundle_groups, 'move') " Moving
     Plug 'tpope/vim-unimpaired' " Pairs of mappings
     Plug 'Lokaltog/vim-easymotion' " Easy motion
     Plug 'kepbod/quick-scope' " Quick scope
-    Plug 'yuttie/comfortable-motion.vim' " Comfortable motion
     Plug 'bkad/CamelCaseMotion' " Camel case motion
     Plug 'majutsushi/tagbar' " Tag bar
     Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  } " Fuzzy finder
@@ -188,35 +186,35 @@ endif
 if count(g:ivim_bundle_groups, 'navigate') " Navigation
     Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } " NERD tree
     Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' } " NERD tree git plugin
-    Plug 'mhinz/vim-tmuxify' " Tmux panes
+    " Plug 'mhinz/vim-tmuxify' " Tmux panes
 endif

-if count(g:ivim_bundle_groups, 'complete') " Completion
-    if g:ivim_autocomplete=='NEO'
-        if has('lua')
-            let g:ivim_completion_engine='neocomplete'
-            Plug 'Shougo/neocomplete.vim' " Auto completion framework
-        else
-            let g:ivim_completion_engine='neocomplcache'
-            Plug 'Shougo/neocomplcache.vim' " Auto completion framework
-        endif
-        Plug 'Shougo/neosnippet.vim' " Snippet engine
-        Plug 'Shougo/neosnippet-snippets' " Snippets
-        Plug 'Shougo/vimproc.vim', { 'do': 'make' }
-        Plug 'wellle/tmux-complete.vim' " Completion for tmux panes
-    else
-        " Auto completion framework
-        let g:ivim_completion_engine='YouCompleteMe'
-        Plug 'Valloric/YouCompleteMe', { 'do': './install.py' } "Auto completion framework
-        Plug 'honza/vim-snippets' " Snippets
-        Plug 'sirver/ultisnips' " Snippet engine
-    endif
-endif
-
-if count(g:ivim_bundle_groups, 'compile') " Compiling
-    Plug 'scrooloose/syntastic' " Syntax checking
-    Plug 'xuhdev/SingleCompile' " Single compile
-endif
+" if count(g:ivim_bundle_groups, 'complete') " Completion
+"     if g:ivim_autocomplete=='NEO'
+"         if has('lua')
+"             let g:ivim_completion_engine='neocomplete'
+"             Plug 'Shougo/neocomplete.vim' " Auto completion framework
+"         else
+"             let g:ivim_completion_engine='neocomplcache'
+"             Plug 'Shougo/neocomplcache.vim' " Auto completion framework
+"         endif
+"         Plug 'Shougo/neosnippet.vim' " Snippet engine
+"         Plug 'Shougo/neosnippet-snippets' " Snippets
+"         Plug 'Shougo/vimproc.vim', { 'do': 'make' }
+"         Plug 'wellle/tmux-complete.vim' " Completion for tmux panes
+"     else
+"         " Auto completion framework
+"         let g:ivim_completion_engine='YouCompleteMe'
+"         Plug 'Valloric/YouCompleteMe', { 'do': './install.py' } "Auto completion framework
+"         Plug 'honza/vim-snippets' " Snippets
+"         Plug 'sirver/ultisnips' " Snippet engine
+"     endif
+" endif
+"
+" if count(g:ivim_bundle_groups, 'compile') " Compiling
+"     Plug 'scrooloose/syntastic' " Syntax checking
+"     Plug 'xuhdev/SingleCompile' " Single compile
+" endif

 if count(g:ivim_bundle_groups, 'git') " Git
     Plug 'tpope/vim-fugitive' " Git wrapper
@@ -248,105 +246,105 @@ call plug#end()
 "-------------------------------------------------

 if count(g:ivim_bundle_groups, 'ui')
-    let g:airline#extensions#tabline#enabled=1
+    let g:airline#extensions#tabline#enabled  = 1
 else
     " Set title
     set title
-    set titlestring=%t%(\ %m%)%(\ (%{expand('%:p:h')})%)%(\ %a%)
+    set titlestring                           = %t%(\ %m%)%(\ (%{expand('%:p:h')})%)%(\ %a%)

     " Set tabline
-    set showtabline=2 " Always show tab line
+    set showtabline                           = 2 " Always show tab line
     " Set up tab labels
-    set guitablabel=%m%N:%t[%{tabpagewinnr(v:lnum)}]
-    set tabline=%!MyTabLine()
+    set guitablabel                           = %m%N:%t[%{tabpagewinnr(v:lnum)}]
+    set tabline                               = %!MyTabLine()
     function! MyTabLine()
-        let s=''
-        let t=tabpagenr() " The index of current page
-        let i=1
-        while i<=tabpagenr('$') " From the first page
-            let buflist=tabpagebuflist(i)
-            let winnr=tabpagewinnr(i)
-            let s.=(i==t ? '%#TabLineSel#' : '%#TabLine#')
-            let s.='%'.i.'T'
-            let s.=' '
-            let bufnr=buflist[winnr-1]
-            let file=bufname(bufnr)
-            let buftype = getbufvar(bufnr, 'buftype')
-            let m=''
+        let s                                 = ''
+        let t                                 = tabpagenr() " The index of current page
+        let i                                 = 1
+        while i                              <= tabpagenr('$') " From the first page
+            let buflist                       = tabpagebuflist(i)
+            let winnr                         = tabpagewinnr(i)
+            let s                            .= (i==t ? '%#TabLineSel#' : '%#TabLine#')
+            let s                            .= '%'.i.'T'
+            let s                            .= ' '
+            let bufnr                         = buflist[winnr-1]
+            let file                          = bufname(bufnr)
+            let buftype                       = getbufvar(bufnr, 'buftype')
+            let m                             = ''
             if getbufvar(bufnr, '&modified')
-                let m='[+]'
+                let m                         = '[+]'
             endif
-            if buftype=='nofile'
-                if file=~'\/.'
-                    let file=substitute(file, '.*\/\ze.', '', '')
+            if buftype                       == 'nofile'
+                if file                      =~ '\/.'
+                    let file                  = substitute(file, '.*\/\ze.', '', '')
                 endif
             else
-                let file=fnamemodify(file, ':p:t')
+                let file                      = fnamemodify(file, ':p:t')
             endif
-            if file==''
-                let file='[No Name]'
+            if file                          == ''
+                let file                      = '[No Name]'
             endif
-            let s.=m
-            let s.=i.':'
-            let s.=file
-            let s.='['.winnr.']'
-            let s.=' '
-            let i=i+1
+            let s                            .= m
+            let s                            .= i.':'
+            let s                            .= file
+            let s                            .= '['.winnr.']'
+            let s                            .= ' '
+            let i                             = i+1
         endwhile
-        let s.='%T%#TabLineFill#%='
-        let s.=(tabpagenr('$')>1 ? '%999XX' : 'X')
+        let s                                .= '%T%#TabLineFill#%='
+        let s                                .= (tabpagenr('$')>1 ? '%999XX' : 'X')
         return s
     endfunction
     " Set tabline colorscheme
-    if g:ivim_default_scheme=='gruvbox'
-        let g:gruvbox_invert_tabline=1
+    if g:ivim_default_scheme                 == 'gruvbox'
+        let g:gruvbox_invert_tabline          = 1
     endif
     " Set up tab tooltips with each buffer name
-    set guitabtooltip=%F
+    set guitabtooltip                         = %F
 endif

 " Set status line
 if count(g:ivim_bundle_groups, 'ui')
-    set laststatus=2 " Show the statusline
+    set laststatus                            = 2 " Show the statusline
     set noshowmode " Hide the default mode text
     " Set status line colorscheme
-    if g:ivim_default_scheme=='hybrid'
-        let g:airline_theme='bubblegum'
-    elseif g:ivim_default_scheme=='tender'
-        let g:tender_airline=1
-        let g:airline_theme='tender'
+    if g:ivim_default_scheme                 == 'hybrid'
+        let g:airline_theme                   = 'bubblegum'
+    elseif g:ivim_default_scheme             == 'tender'
+        let g:tender_airline                  = 1
+        let g:airline_theme                   = 'tender'
     endif
-    set ttimeoutlen=50
-    let g:bufferline_echo=0
-    let g:bufferline_modified='[+]'
+    set ttimeoutlen                           = 50
+    let g:bufferline_echo                     = 0
+    let g:bufferline_modified                 = '[+]'
     if g:ivim_fancy_font
-        let g:airline_powerline_fonts=1
+        let g:airline_powerline_fonts         = 1
     else
-        let g:airline_left_sep=''
-        let g:airline_right_sep=''
+        let g:airline_left_sep                = ''
+        let g:airline_right_sep               = ''
     endif
 endif

 " Only have cursorline in current window and in normal window
 autocmd WinLeave * set nocursorline
-autocmd WinEnter * set cursorline
+" autocmd WinEnter * set cursorline
 autocmd InsertEnter * set nocursorline
-autocmd InsertLeave * set cursorline
+" autocmd InsertLeave * set cursorline
 set wildmenu " Show list instead of just completing
-set wildmode=list:longest,full " Use powerful wildmenu
-set shortmess=at " Avoids hit enter
+set wildmode                                  = list:longest,full " Use powerful wildmenu
+set shortmess                                 = at " Avoids hit enter
 set showcmd " Show cmd

-set backspace=indent,eol,start " Make backspaces delete sensibly
-set whichwrap+=h,l,<,>,[,] " Backspace and cursor keys wrap to
-set virtualedit=block,onemore " Allow for cursor beyond last character
-set scrolljump=5 " Lines to scroll when cursor leaves screen
-set scrolloff=3 " Minimum lines to keep above and below cursor
-set sidescroll=1 " Minimal number of columns to scroll horizontally
-set sidescrolloff=10 " Minimal number of screen columns to keep away from cursor
+set backspace                                 = indent,eol,start " Make backspaces delete sensibly
+set whichwrap                                += h,l,<,>,[,] " Backspace and cursor keys wrap to
+set virtualedit                               = block,onemore " Allow for cursor beyond last character
+set scrolljump                                = 5 " Lines to scroll when cursor leaves screen
+set scrolloff                                 = 3 " Minimum lines to keep above and below cursor
+set sidescroll                                = 1 " Minimal number of columns to scroll horizontally
+set sidescrolloff                             = 10 " Minimal number of screen columns to keep away from cursor

 set showmatch " Show matching brackets/parenthesis
-set matchtime=2 " Decrease the time to blink
+set matchtime                                 = 2 " Decrease the time to blink

 if g:ivim_show_number
     set number " Show line numbers
@@ -354,26 +352,26 @@ if g:ivim_show_number
     nnoremap <Leader>n :set relativenumber!<CR>
 endif

-set formatoptions+=rnlmM " Optimize format options
+set formatoptions                            += rnlmM " Optimize format options
 set wrap " Set wrap
-set textwidth=80 " Change text width
+set textwidth                                 = 80 " Change text width
 if g:ivim_fancy_font
-    set list " Show these tabs and spaces and so on
-    set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮ " Change listchars
+    " set list " Show these tabs and spaces and so on
+    set listchars                             = tab:▸\ ,eol:¬,extends:❯,precedes:❮ " Change listchars
     set linebreak " Wrap long lines at a blank
-    set showbreak=↪  " Change wrap line break
-    set fillchars=diff:⣿,vert:│ " Change fillchars
-    augroup trailing " Only show trailing whitespace when not in insert mode
-        autocmd!
-        autocmd InsertEnter * :set listchars-=trail:⌴
-        autocmd InsertLeave * :set listchars+=trail:⌴
-    augroup END
+    " set showbreak=↪  " Change wrap line break
+    " set fillchars=diff:⣿,vert:│ " Change fillchars
+    " augroup trailing " Only show trailing whitespace when not in insert mode
+    "     autocmd!
+    "     autocmd InsertEnter * :set listchars-=trail:⌴
+    "     autocmd InsertLeave * :set listchars+=trail:⌴
+    " augroup END
 endif

 " Set gVim UI setting
 if has('gui_running')
-    set guioptions-=m
-    set guioptions-=T
+    set guioptions                           -= m
+    set guioptions                           -= T
 endif

 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
@@ -383,9 +381,9 @@ endif
 "-------------------------------------------------

 syntax on " Enable syntax
-set background=dark " Set background
+background                                = dark " Set background
 if !has('gui_running')
-    set t_Co=256 " Use 256 colors
+    set t_Co                                  = 256 " Use 256 colors
 endif

 " Use true colors
@@ -397,11 +395,11 @@ endif

 " Load a colorscheme
 if count(g:ivim_bundle_groups, 'ui')
-    if g:ivim_default_scheme=='hybrid'
+    if g:ivim_default_scheme                 == 'hybrid'
         colorscheme hybrid_reverse
-    elseif g:ivim_default_scheme=='gruvbox'
+    elseif g:ivim_default_scheme             == 'gruvbox'
         colorscheme gruvbox
-    elseif g:ivim_default_scheme=='tender'
+    elseif g:ivim_default_scheme             == 'tender'
         colorscheme tender
     endif
 else
@@ -411,9 +409,9 @@ endif
 " Set GUI font
 if has('gui_running')
     if has('gui_gtk')
-        set guifont=DejaVu\ Sans\ Mono\ 18
+        set guifont                           = Hack:18
     else
-        set guifont=DejaVu\ Sans\ Mono:h18
+        set guifont                           = Hack:h18
     endif
 endif

@@ -426,8 +424,8 @@ endif
 set autoindent " Preserve current indent on new lines
 set cindent " set C style indent
 set expandtab " Convert all tabs typed to spaces
-set softtabstop=4 " Indentation levels every four columns
-set shiftwidth=4 " Indent/outdent by four columns
+set softtabstop                               = 2 " Indentation levels every four columns
+set shiftwidth                                = 2 " Indent/outdent by four columns
 set shiftround " Indent/outdent to nearest tabstop

 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
@@ -459,26 +457,26 @@ nnoremap <Leader><Space> :set hlsearch!<CR>
 " => Fold Related
 "-------------------------------------------------

-set foldlevelstart=0 " Start with all folds closed
-set foldcolumn=1 " Set fold column
+set foldlevelstart                            = 0 " Start with all folds closed
+set foldcolumn                                = 1 " Set fold column

 " Space to toggle and create folds.
-nnoremap <silent> <Space> @=(foldlevel('.') ? 'za' : '\<Space>')<CR>
+nnoremap <silent> <Space> @                   = (foldlevel('.') ? 'za' : '\<Space>')<CR>
 vnoremap <Space> zf

 " Set foldtext
 function! MyFoldText()
-    let line=getline(v:foldstart)
-    let nucolwidth=&foldcolumn+&number*&numberwidth
-    let windowwidth=winwidth(0)-nucolwidth-3
-    let foldedlinecount=v:foldend-v:foldstart+1
-    let onetab=strpart('          ', 0, &tabstop)
-    let line=substitute(line, '\t', onetab, 'g')
-    let line=strpart(line, 0, windowwidth-2-len(foldedlinecount))
-    let fillcharcount=windowwidth-len(line)-len(foldedlinecount)
+    let line                                  = getline(v:foldstart)
+    let nucolwidth                            = &foldcolumn+&number*&numberwidth
+    let windowwidth                           = winwidth(0)-nucolwidth-3
+    let foldedlinecount                       = v:foldend-v:foldstart+1
+    let onetab                                = strpart('          ', 0, &tabstop)
+    let line                                  = substitute(line, '\t', onetab, 'g')
+    let line                                  = strpart(line, 0, windowwidth-2-len(foldedlinecount))
+    let fillcharcount                         = windowwidth-len(line)-len(foldedlinecount)
     return line.'…'.repeat(' ',fillcharcount).foldedlinecount.'L'.' '
 endfunction
-set foldtext=MyFoldText()
+set foldtext                                  = MyFoldText()

 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

@@ -517,13 +515,13 @@ nnoremap J mzJ`z
 nnoremap vaa ggvGg_

 " Strip all trailing whitespace in the current file
-nnoremap <Leader>q :%s/\s\+$//<CR>:let @/=''<CR>
+nnoremap <Leader>q :%s/\s\+$//<CR>:let @     /= ''<CR>

 " Modify all the indents
-nnoremap \= gg=G
+nnoremap \                                    = gg=G

 " See the differences between the current buffer and the file it was loaded from
-command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_
+command! DiffOrig vert new | set bt           = nofile | r ++edit # | 0d_
             \ | diffthis | wincmd p | diffthis

 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
@@ -536,29 +534,29 @@ command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_
 if count(g:ivim_bundle_groups, 'ui')

     " -> Startify
-    let g:startify_session_dir=$HOME . '/.vim/session'
-    let g:startify_custom_header=[
+    let g:startify_session_dir                = $HOME . '/.vim/session'
+    let g:startify_custom_header              = [
                 \'       _       _         ',
                 \'      (_)   __(_)___ ___ ',
                 \'     / / | / / / __ `__ \',
                 \'    / /| |/ / / / / / / /',
                 \'   /_/ |___/_/_/ /_/ /_/ ',
                 \'                         ']
-    let g:startify_custom_footer=['', '    This configuration is maintained by Xiao-Ou Zhang <kepbod@gmail.com> and other contributors. Thanks!']
+    let g:startify_custom_footer              = ['', '    This configuration is maintained by Xiao-Ou Zhang <kepbod@gmail.com> and other contributors. Thanks!']
     if has('gui_running')
-        hi StartifyHeader  guifg=#87afff
-        hi StartifyFooter  guifg=#87afff
-        hi StartifyBracket guifg=#585858
-        hi StartifyNumber  guifg=#ffaf5f
-        hi StartifyPath    guifg=#8a8a8a
-        hi StartifySlash   guifg=#585858
+        hi StartifyHeader  guifg             =# 87afff
+        hi StartifyFooter  guifg             =# 87afff
+        hi StartifyBracket guifg             =# 585858
+        hi StartifyNumber  guifg             =# ffaf5f
+        hi StartifyPath    guifg             =# 8a8a8a
+        hi StartifySlash   guifg             =# 585858
     else
-        hi StartifyHeader  ctermfg=111
-        hi StartifyFooter  ctermfg=111
-        hi StartifyBracket ctermfg=240
-        hi StartifyNumber  ctermfg=215
-        hi StartifyPath    ctermfg=245
-        hi StartifySlash   ctermfg=240
+        hi StartifyHeader  ctermfg            = 111
+        hi StartifyFooter  ctermfg            = 111
+        hi StartifyBracket ctermfg            = 240
+        hi StartifyNumber  ctermfg            = 215
+        hi StartifyPath    ctermfg            = 245
+        hi StartifySlash   ctermfg            = 240
     endif

     " -> Goyo & Limelight
@@ -571,14 +569,14 @@ endif
 if count(g:ivim_bundle_groups, 'enhance')

     " -> delimitMate
-    let delimitMate_expand_cr=1
-    let delimitMate_expand_space=1
-    let delimitMate_balance_matchpairs=1
+    let delimitMate_expand_cr                 = 1
+    let delimitMate_expand_space              = 1
+    let delimitMate_balance_matchpairs        = 1

     " -> Tcomment
     " Map \<Space> to commenting
     function! IsWhiteLine()
-        if (getline('.')=~'^$')
+        if (getline('.')                     =~ '^$')
             exe 'TCommentBlock'
             normal! j
         else
@@ -591,49 +589,30 @@ if count(g:ivim_bundle_groups, 'enhance')
     endfunction
     nnoremap <silent> <LocalLeader><Space> :call IsWhiteLine()<CR>

-    " -> Multiple cursors
-    " Called once right before you start selecting multiple cursors
-    if g:ivim_autocomplete=='NEO'
-        function! Multiple_cursors_before()
-            if g:ivim_completion_engine=='neocomplete'
-                exe 'NeoCompleteLock'
-            else
-                exe 'NeoComplCacheLock'
-            endif
-        endfunction
-        " Called once only when the multiple selection is canceled (default <Esc>)
-        function! Multiple_cursors_after()
-            if g:ivim_completion_engine=='neocomplete'
-                exe 'NeoCompleteUnlock'
-            else
-                exe 'NeoComplCacheUnlock'
-            endif
-        endfunction
-    endif
-
     " -> Undo tree
     nnoremap <Leader>u :UndotreeToggle<CR>
-    let g:undotree_SetFocusWhenToggle=1
+    let g:undotree_SetFocusWhenToggle         = 1

     " -> Easy Align
     xmap ga <Plug>(EasyAlign)
     nmap ga <Plug>(EasyAlign)

     " -> Gutentags
-    let g:gutentags_cache_dir=$HOME . '/.vim/cache/ctags'
+    let g:gutentags_cache_dir                 = $HOME . '/.vim/cache/ctags'

     " -> Splitjoin
-    let g:splitjoin_split_mapping = ',s'
-    let g:splitjoin_join_mapping  = ',j'
-    let g:splitjoin_normalize_whitespace=1
-    let g:splitjoin_align=1
+    let g:splitjoin_split_mapping             = ',s'
+    let g:splitjoin_join_mapping              = ',j'
+    let g:splitjoin_normalize_whitespace      = 1
+    let g:splitjoin_align                     = 1

     " -> Investigate.vim
     nnoremap K :call investigate#Investigate()<CR>
-    let g:investigate_use_dash=1
+    " let g:investigate_use_dash=1
+

     " -> EnhancedDiff
-    let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'
+    let &diffexpr                             = 'EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'

 endif

@@ -642,10 +621,10 @@ if count(g:ivim_bundle_groups, 'move')

     " -> Tag bar
     nnoremap <Leader>t :TagbarToggle<CR>
-    let g:tagbar_autofocus=1
-    let g:tagbar_expand=1
-    let g:tagbar_foldlevel=2
-    let g:tagbar_autoshowtag=1
+    let g:tagbar_autofocus                    = 1
+    let g:tagbar_expand                       = 1
+    let g:tagbar_foldlevel                    = 2
+    let g:tagbar_autoshowtag                  = 1

     " Matchit
     " Start mathit
@@ -661,10 +640,10 @@ if count(g:ivim_bundle_groups, 'navigate')

     " -> NERD Tree
     nnoremap <Leader>f :NERDTreeToggle<CR>
-    let NERDTreeChDirMode=2
-    let NERDTreeShowBookmarks=1
-    let NERDTreeShowHidden=1
-    let NERDTreeShowLineNumbers=1
+    let NERDTreeChDirMode                     = 2
+    let NERDTreeShowBookmarks                 = 1
+    let NERDTreeShowHidden                    = 1
+    let NERDTreeShowLineNumbers               = 1
     augroup nerd_loader
         autocmd!
         autocmd VimEnter * silent! autocmd! FileExplorer
@@ -678,96 +657,95 @@ if count(g:ivim_bundle_groups, 'navigate')
 endif

 " Setting for completion plugins
-if count(g:ivim_bundle_groups, 'complete')
-
-    if g:ivim_autocomplete=='NEO'
-        " -> Neocomplete & Neocomplcache
-        " Use Tab and S-Tab to select candidate
-        inoremap <expr><Tab>  pumvisible() ? "\<C-N>" : "\<Tab>"
-        inoremap <expr><S-Tab> pumvisible() ? "\<C-P>" : "\<S-Tab>"
-        if g:ivim_completion_engine=='neocomplete'
-            let g:neocomplete#enable_at_startup=1
-            let g:neocomplete#data_directory=$HOME . '/.vim/cache/neocomplete'
-            let g:neocomplete#enable_auto_delimiter=1
-            " Use <C-E> to close popup
-            inoremap <expr><C-E> neocomplete#cancel_popup()
-            inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
-                        \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
-                        \ pumvisible() ? neocomplete#close_popup() : "\<CR>"
-        else
-            let g:neocomplcache_enable_at_startup=1
-            let g:neocomplcache_temporary_dir=$HOME . '/.vim/cache/neocomplcache'
-            let g:neocomplcache_enable_auto_delimiter=1
-            let g:neocomplcache_enable_fuzzy_completion=1
-            " Use <C-E> to close popup
-            inoremap <expr><C-E> neocomplcache#cancel_popup()
-            inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
-                        \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
-                        \ pumvisible() ? neocomplcache#close_popup() : "\<CR>"
-        endif
-        " Setting for specific language
-        if has('lua')
-            if !exists('g:neocomplete#force_omni_input_patterns')
-                let g:neocomplete#force_omni_input_patterns={}
-            endif
-            let g:neocomplete#force_omni_input_patterns.python=
-            \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
-        else
-            if !exists('g:neocomplcache_force_omni_patterns')
-                let g:neocomplcache_force_omni_patterns={}
-            endif
-            let g:neocomplcache_force_omni_patterns.python=
-            \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
-        endif
-        autocmd FileType python setlocal omnifunc=jedi#completions
-        let g:jedi#completions_enabled=0
-        let g:jedi#auto_vim_configuration=0
-        let g:jedi#smart_auto_mappings=0
-        let g:jedi#use_tabs_not_buffers=1
-        let g:tmuxcomplete#trigger=''
-        " -> Neosnippet
-        " Set information for snippets
-        let g:neosnippet#enable_snipmate_compatibility=1
-        " Use <C-K> to expand or jump snippets in insert mode
-        imap <C-K> <Plug>(neosnippet_expand_or_jump)
-        " Use <C-K> to replace TARGET within snippets in visual mode
-        xmap <C-K> <Plug>(neosnippet_start_unite_snippet_target)
-        " For snippet_complete marker
-        if has('conceal')
-            set conceallevel=2 concealcursor=i
-        endif
-    else
-        " -> UltiSnips
-        let g:UltiSnipsExpandTrigger="<C-K>"
-        let g:UltiSnipsJumpForwardTrigger="<Tab>"
-        let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
-    endif
-
-    " Setting info for snips
-    let g:snips_author=g:ivim_user
-    let g:snips_email=g:ivim_email
-    let g:snips_github=g:ivim_github
-
-endif
+" if count(g:ivim_bundle_groups, 'complete')
+"     if g:ivim_autocomplete=='NEO'
+"         " -> Neocomplete & Neocomplcache
+"         " Use Tab and S-Tab to select candidate
+"         inoremap <expr><Tab>  pumvisible() ? "\<C-N>" : "\<Tab>"
+"         inoremap <expr><S-Tab> pumvisible() ? "\<C-P>" : "\<S-Tab>"
+"         if g:ivim_completion_engine=='neocomplete'
+"             let g:neocomplete#enable_at_startup=1
+"             let g:neocomplete#data_directory=$HOME . '/.vim/cache/neocomplete'
+"             let g:neocomplete#enable_auto_delimiter=1
+"             " Use <C-E> to close popup
+"             inoremap <expr><C-E> neocomplete#cancel_popup()
+"             inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
+"                         \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
+"                         \ pumvisible() ? neocomplete#close_popup() : "\<CR>"
+"         else
+"             let g:neocomplcache_enable_at_startup=1
+"             let g:neocomplcache_temporary_dir=$HOME . '/.vim/cache/neocomplcache'
+"             let g:neocomplcache_enable_auto_delimiter=1
+"             let g:neocomplcache_enable_fuzzy_completion=1
+"             " Use <C-E> to close popup
+"             inoremap <expr><C-E> neocomplcache#cancel_popup()
+"             inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
+"                         \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
+"                         \ pumvisible() ? neocomplcache#close_popup() : "\<CR>"
+"         endif
+"         " Setting for specific language
+"         if has('lua')
+"             if !exists('g:neocomplete#force_omni_input_patterns')
+"                 let g:neocomplete#force_omni_input_patterns={}
+"             endif
+"             let g:neocomplete#force_omni_input_patterns.python=
+"             \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
+"         else
+"             if !exists('g:neocomplcache_force_omni_patterns')
+"                 let g:neocomplcache_force_omni_patterns={}
+"             endif
+"             let g:neocomplcache_force_omni_patterns.python=
+"             \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
+"         endif
+"         autocmd FileType python setlocal omnifunc=jedi#completions
+"         let g:jedi#completions_enabled=0
+"         let g:jedi#auto_vim_configuration=0
+"         let g:jedi#smart_auto_mappings=0
+"         let g:jedi#use_tabs_not_buffers=1
+"         let g:tmuxcomplete#trigger=''
+"         " -> Neosnippet
+"         " Set information for snippets
+"         let g:neosnippet#enable_snipmate_compatibility=1
+"         " Use <C-K> to expand or jump snippets in insert mode
+"         imap <C-K> <Plug>(neosnippet_expand_or_jump)
+"         " Use <C-K> to replace TARGET within snippets in visual mode
+"         xmap <C-K> <Plug>(neosnippet_start_unite_snippet_target)
+"         " For snippet_complete marker
+"         if has('conceal')
+"             set conceallevel=2 concealcursor=i
+"         endif
+"     else
+"         " -> UltiSnips
+"         let g:UltiSnipsExpandTrigger="<C-K>"
+"         let g:UltiSnipsJumpForwardTrigger="<Tab>"
+"         let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
+"     endif
+"
+"     " Setting info for snips
+"     let g:snips_author=g:ivim_user
+"     let g:snips_email=g:ivim_email
+"     let g:snips_github=g:ivim_github
+"
+" endif

 " Setting for compiling plugins
 if count(g:ivim_bundle_groups, 'compile')

     " -> Syntastic
-    let g:syntastic_check_on_open=1
-    let g:syntastic_aggregate_errors=1
-    let g:syntastic_auto_jump=1
-    let g:syntastic_auto_loc_list=1
E121: Undefined variable: g:ivim_show_number
Press ENTER or type command to continue

~/totfiles master* 12s
❯ ls
Brew                   General                Local                  Search                 bitbar-plugins         home                   pygo.py
Colors                 Key                    README.md              Vim-plug               build-brew-path-var.sh iterm2                 scripts

~/totfiles master*
❯ cd

~
❯ ls
Applications                                  Local                                         electron-api-demos                            rollup-starter-lib
AssemblyScript                                Movies                                        hack-hour-ny-11                               seeql
CBS                                           Music                                         linuxify                                      setup.sh
CoStar-iOS-cache                              Pictures                                      livestream-server                             studera
Colors                                        Public                                        main                                          symlink-all-dots.sh
Desktop                                       Search                                        notodo       diff --git a/vimrc b/vimrc
index 878d9be..b107f13 100644
--- a/vimrc
+++ b/vimrc
@@ -1,9 +1,3 @@
-"       _       _
-"      (_)   __(_)___ ___
-"     / / | / / / __ `__ \
-"    / /| |/ / / / / / / /
-"   /_/ |___/_/_/ /_/ /_/
-"
 "   Main Contributor: Xiao-Ou Zhang (kepbod) <kepbod@gmail.com>
 "   Version: 3.0
 "   Created: 2012-01-20
@@ -33,19 +27,15 @@
 "------------------------------------------------

 " ivim user setting
-let g:ivim_user='Xiao-Ou Zhang' " User name
-let g:ivim_email='kepbod@gmail.com' " User email
-let g:ivim_github='https://github.com/kepbod' " User github
 " ivim color settings (hybrid, gruvbox or tender)
-let g:ivim_default_scheme='hybrid'
+let g:ivim_default_scheme                     = 'gruvbox'
 " ivim ui setting
-let g:ivim_fancy_font=1 " Enable using fancy font
-let g:ivim_show_number=1 " Enable showing number
+let g:ivim_fancy_font                         = 1 " Enable using fancy font
+" let g:ivim_show_n
 " ivim autocomplete setting (YCM or NEO)
-let g:ivim_autocomplete='NEO'
+" let g:ivim_autocomplete='NEO'
 " ivim plugin setting
-let g:ivim_bundle_groups=['ui', 'enhance', 'move', 'navigate',
-            \'complete', 'compile', 'git', 'language']
+let g:ivim_bundle_groups                      = ['ui', 'enhance', 'move', 'navigate', 'git', 'language']

 " Customise ivim settings for personal usage
 if filereadable(expand($HOME . '/.vimrc.ivim.local'))
@@ -60,9 +50,9 @@ endif

 set nocompatible " Get out of vi compatible mode
 filetype plugin indent on " Enable filetype
-let mapleader=',' " Change the mapleader
-let maplocalleader='\' " Change the maplocalleader
-set timeoutlen=500 " Time to wait for a command
+let mapleader                                 = ',' " Change the mapleader
+let maplocalleader                            = '\' " Change the maplocalleader
+set timeoutlen                                = 500 " Time to wait for a command

 " Source the vimrc file after saving it
 autocmd BufWritePost $MYVIMRC source $MYVIMRC
@@ -73,39 +63,41 @@ set autoread " Set autoread when a file is changed outside
 set autowrite " Write on make/shell commands
 set hidden " Turn on hidden"

diff --git a/vimrc b/vimrc
index 878d9be..b107f13 100644
--- a/vimrc
+++ b/vimrc
@@ -1,9 +1,3 @@
-"       _       _
-"      (_)   __(_)___ ___
-"     / / | / / / __ `__ \
-"    / /| |/ / / / / / / /
-"   /_/ |___/_/_/ /_/ /_/
-"
 "   Main Contributor: Xiao-Ou Zhang (kepbod) <kepbod@gmail.com>
 "   Version: 3.0
 "   Created: 2012-01-20
@@ -33,19 +27,15 @@
 "------------------------------------------------

 " ivim user setting
-let g:ivim_user='Xiao-Ou Zhang' " User name
-let g:ivim_email='kepbod@gmail.com' " User email
-let g:ivim_github='https://github.com/kepbod' " User github
 " ivim color settings (hybrid, gruvbox or tender)
-let g:ivim_default_scheme='hybrid'
+let g:ivim_default_scheme                     = 'gruvbox'
 " ivim ui setting
-let g:ivim_fancy_font=1 " Enable using fancy font
-let g:ivim_show_number=1 " Enable showing number
+let g:ivim_fancy_font                         = 1 " Enable using fancy font
+" let g:ivim_show_n
 " ivim autocomplete setting (YCM or NEO)
-let g:ivim_autocomplete='NEO'
+" let g:ivim_autocomplete='NEO'
 " ivim plugin setting
-let g:ivim_bundle_groups=['ui', 'enhance', 'move', 'navigate',
-            \'complete', 'compile', 'git', 'language']
+let g:ivim_bundle_groups                      = ['ui', 'enhance', 'move', 'navigate', 'git', 'language']

 " Customise ivim settings for personal usage
 if filereadable(expand($HOME . '/.vimrc.ivim.local'))
@@ -60,9 +50,9 @@ endif

 set nocompatible " Get out of vi compatible mode
 filetype plugin indent on " Enable filetype
-let mapleader=',' " Change the mapleader
-let maplocalleader='\' " Change the maplocalleader
-set timeoutlen=500 " Time to wait for a command
+let mapleader                                 = ',' " Change the mapleader
+let maplocalleader                            = '\' " Change the maplocalleader
+set timeoutlen                                = 500 " Time to wait for a command

 " Source the vimrc file after saving it
 autocmd BufWritePost $MYVIMRC source $MYVIMRC
@@ -73,39 +63,41 @@ set autoread " Set autoread when a file is changed outside
 set autowrite " Write on make/shell commands
 set hidden " Turn on hidden"

lines 1-56
lines 1-56
                                 todo
Documents                                     UPLOAD-HEMLIGHETS                             react-express-starter                         totfiles
diff --git a/vimrc b/vimrc
index 878d9be..b107f13 100644
--- a/vimrc
+++ b/vimrc
@@ -1,9 +1,3 @@
-"       _       _
-"      (_)   __(_)___ ___
-"     / / | / / / __ `__ \
-"    / /| |/ / / / / / / /
-"   /_/ |___/_/_/ /_/ /_/
-"
 "   Main Contributor: Xiao-Ou Zhang (kepbod) <kepbod@gmail.com>
 "   Version: 3.0
 "   Created: 2012-01-20
@@ -33,19 +27,15 @@
 "------------------------------------------------

 " ivim user setting
-let g:ivim_user='Xiao-Ou Zhang' " User name
-let g:ivim_email='kepbod@gmail.com' " User email
-let g:ivim_github='https://github.com/kepbod' " User github
 " ivim color settings (hybrid, gruvbox or tender)
-let g:ivim_default_scheme='hybrid'
+let g:ivim_default_scheme                     = 'gruvbox'
 " ivim ui setting
-let g:ivim_fancy_font=1 " Enable using fancy font
-let g:ivim_show_number=1 " Enable showing number
+let g:ivim_fancy_font                         = 1 " Enable using fancy font
+" let g:ivim_show_n
 " ivim autocomplete setting (YCM or NEO)
-let g:ivim_autocomplete='NEO'
+" let g:ivim_autocomplete='NEO'
 " ivim plugin setting
-let g:ivim_bundle_groups=['ui', 'enhance', 'move', 'navigate',
-            \'complete', 'compile', 'git', 'language']
+let g:ivim_bundle_groups                      = ['ui', 'enhance', 'move', 'navigate', 'git', 'language']

 " Customise ivim settings for personal usage
 if filereadable(expand($HOME . '/.vimrc.ivim.local'))
@@ -60,9 +50,9 @@ endif

 set nocompatible " Get out of vi compatible mode
 filetype plugin indent on " Enable filetype
-let mapleader=',' " Change the mapleader
-let maplocalleader='\' " Change the maplocalleader
-set timeoutlen=500 " Time to wait for a command
+let mapleader                                 = ',' " Change the mapleader
+let maplocalleader                            = '\' " Change the maplocalleader
+set timeoutlen                                = 500 " Time to wait for a command

 " Source the vimrc file after saving it
 autocmd BufWritePost $MYVIMRC source $MYVIMRC
@@ -73,39 +63,41 @@ set autoread " Set autoread when a file is changed outside
 set autowrite " Write on make/shell commands
 set hidden " Turn on hidden"

-set history=1000 " Increase the lines of history
+set history                                   = 1000 " Increase the lines of history
 set modeline " Turn on modeline
-set encoding=utf-8 " Set utf-8 encoding
-set completeopt+=longest " Optimize auto complete
-set completeopt-=preview " Optimize auto complete
+set encoding                                  = utf-8 " Set utf-8 encoding
+set completeopt                              += longest " Optimize auto complete
+set completeopt                              += preview " Optimize auto complete

 set undofile " Set undo

 " Set directories
 function! InitializeDirectories()
-    let parent=$HOME
-    let prefix='.vim'
-    let dir_list={
+    let parent                                = $HOME
+    let prefix                                = '.vim'
+    let dir_list                              = {
                 \ 'backup': 'backupdir',
                 \ 'view': 'viewdir',
                 \ 'swap': 'directory',
                 \ 'undo': 'undodir',
                 \ 'cache': '',
                 \ 'session': ''}
+
     for [dirname, settingname] in items(dir_list)
-        let directory=parent.'/'.prefix.'/'.dirname.'/'
+        let directory                         = parent.'/'.prefix.'/'.dirname.'/'
         if !isdirectory(directory)
             if exists('*mkdir')
-                let dir = substitute(directory, "/$", "", "")
+                let dir                       = substitute(directory, "/$", "", "")
                 call mkdir(dir, 'p')
             else
                 echo 'Warning: Unable to create directory: '.directory
             endif
         endif
-        if settingname!=''
+        if settingname                       != ''
             exe 'set '.settingname.'='.directory
         endif
     endfor
+
 endfunction
 call InitializeDirectories()

@@ -120,13 +112,11 @@ autocmd BufWinEnter *.* silent! loadview " Make Vim load view (state) (folds, cu

 " On Windows, also use .vim instead of vimfiles
 if has('win32') || has('win64')
-    set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
+    set runtimepath                           = $HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
 endif

-set viewoptions+=slash,unix " Better Unix/Windows compatibility
-set viewoptions-=options " in case of mapping change
-
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+set viewoptions                              += slash,unix " Better Unix/Windows compatibility
+set viewoptions                              -= options " in case of mapping change

 "--------------------------------------------------
 " => Vim-plug
@@ -154,10 +144,19 @@ if count(g:ivim_bundle_groups, 'ui') " UI setting
 endif

 if count(g:ivim_bundle_groups, 'enhance') " Vim enhancement
+    Plug 'vimwiki/vimwiki'
+    Plug 'ctrlpvim/ctrlp.vim'
+    if has('nvim')
+      Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
+    else
+      Plug 'Shougo/deoplete.nvim'
+      Plug 'roxma/nvim-yarp'
+      Plug 'roxma/vim-hug-neovim-rpc'
+    endif
+
     Plug 'Raimondi/delimitMate' " Closing of quotes
     Plug 'tomtom/tcomment_vim' " Commenter
     Plug 'tpope/vim-abolish' " Abolish
-    Plug 'tpope/vim-speeddating' " Speed dating
     Plug 'tpope/vim-repeat' " Repeat
     Plug 'terryma/vim-multiple-cursors' " Multiple cursors
     Plug 'junegunn/vim-slash' " In-buffer search
@@ -178,7 +177,6 @@ if count(g:ivim_bundle_groups, 'move') " Moving
     Plug 'tpope/vim-unimpaired' " Pairs of mappings
     Plug 'Lokaltog/vim-easymotion' " Easy motion
     Plug 'kepbod/quick-scope' " Quick scope
-    Plug 'yuttie/comfortable-motion.vim' " Comfortable motion
     Plug 'bkad/CamelCaseMotion' " Camel case motion
     Plug 'majutsushi/tagbar' " Tag bar
     Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  } " Fuzzy finder
@@ -188,35 +186,35 @@ endif
 if count(g:ivim_bundle_groups, 'navigate') " Navigation
     Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } " NERD tree
     Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' } " NERD tree git plugin
-    Plug 'mhinz/vim-tmuxify' " Tmux panes
+    " Plug 'mhinz/vim-tmuxify' " Tmux panes
 endif

-if count(g:ivim_bundle_groups, 'complete') " Completion
-    if g:ivim_autocomplete=='NEO'
-        if has('lua')
-            let g:ivim_completion_engine='neocomplete'
-            Plug 'Shougo/neocomplete.vim' " Auto completion framework
-        else
-            let g:ivim_completion_engine='neocomplcache'
-            Plug 'Shougo/neocomplcache.vim' " Auto completion framework
-        endif
-        Plug 'Shougo/neosnippet.vim' " Snippet engine
-        Plug 'Shougo/neosnippet-snippets' " Snippets
-        Plug 'Shougo/vimproc.vim', { 'do': 'make' }
-        Plug 'wellle/tmux-complete.vim' " Completion for tmux panes
-    else
-        " Auto completion framework
-        let g:ivim_completion_engine='YouCompleteMe'
-        Plug 'Valloric/YouCompleteMe', { 'do': './install.py' } "Auto completion framework
-        Plug 'honza/vim-snippets' " Snippets
-        Plug 'sirver/ultisnips' " Snippet engine
-    endif
-endif
-
-if count(g:ivim_bundle_groups, 'compile') " Compiling
-    Plug 'scrooloose/syntastic' " Syntax checking
-    Plug 'xuhdev/SingleCompile' " Single compile
-endif
+" if count(g:ivim_bundle_groups, 'complete') " Completion
+"     if g:ivim_autocomplete=='NEO'
+"         if has('lua')
+"             let g:ivim_completion_engine='neocomplete'
+"             Plug 'Shougo/neocomplete.vim' " Auto completion framework
+"         else
+"             let g:ivim_completion_engine='neocomplcache'
+"             Plug 'Shougo/neocomplcache.vim' " Auto completion framework
+"         endif
+"         Plug 'Shougo/neosnippet.vim' " Snippet engine
+"         Plug 'Shougo/neosnippet-snippets' " Snippets
+"         Plug 'Shougo/vimproc.vim', { 'do': 'make' }
+"         Plug 'wellle/tmux-complete.vim' " Completion for tmux panes
+"     else
+"         " Auto completion framework
+"         let g:ivim_completion_engine='YouCompleteMe'
+"         Plug 'Valloric/YouCompleteMe', { 'do': './install.py' } "Auto completion framework
+"         Plug 'honza/vim-snippets' " Snippets
+"         Plug 'sirver/ultisnips' " Snippet engine
+"     endif
+" endif
+"
+" if count(g:ivim_bundle_groups, 'compile') " Compiling
+"     Plug 'scrooloose/syntastic' " Syntax checking
+"     Plug 'xuhdev/SingleCompile' " Single compile
+" endif

 if count(g:ivim_bundle_groups, 'git') " Git
     Plug 'tpope/vim-fugitive' " Git wrapper
@@ -248,105 +246,105 @@ call plug#end()
 "-------------------------------------------------

 if count(g:ivim_bundle_groups, 'ui')
-    let g:airline#extensions#tabline#enabled=1
+    let g:airline#extensions#tabline#enabled  = 1
 else
     " Set title
     set title
-    set titlestring=%t%(\ %m%)%(\ (%{expand('%:p:h')})%)%(\ %a%)
+    set titlestring                           = %t%(\ %m%)%(\ (%{expand('%:p:h')})%)%(\ %a%)

     " Set tabline
-    set showtabline=2 " Always show tab line
+    set showtabline                           = 2 " Always show tab line
     " Set up tab labels
-    set guitablabel=%m%N:%t[%{tabpagewinnr(v:lnum)}]
-    set tabline=%!MyTabLine()
+    set guitablabel                           = %m%N:%t[%{tabpagewinnr(v:lnum)}]
+    set tabline                               = %!MyTabLine()
     function! MyTabLine()
-        let s=''
-        let t=tabpagenr() " The index of current page
-        let i=1
-        while i<=tabpagenr('$') " From the first page
-            let buflist=tabpagebuflist(i)
-            let winnr=tabpagewinnr(i)
-            let s.=(i==t ? '%#TabLineSel#' : '%#TabLine#')
-            let s.='%'.i.'T'
-            let s.=' '
-            let bufnr=buflist[winnr-1]
-            let file=bufname(bufnr)
-            let buftype = getbufvar(bufnr, 'buftype')
-            let m=''
+        let s                                 = ''
+        let t                                 = tabpagenr() " The index of current page
+        let i                                 = 1
+        while i                              <= tabpagenr('$') " From the first page
+            let buflist                       = tabpagebuflist(i)
+            let winnr                         = tabpagewinnr(i)
+            let s                            .= (i==t ? '%#TabLineSel#' : '%#TabLine#')
+            let s                            .= '%'.i.'T'
+            let s                            .= ' '
+            let bufnr                         = buflist[winnr-1]
+            let file                          = bufname(bufnr)
+            let buftype                       = getbufvar(bufnr, 'buftype')
+            let m                             = ''
             if getbufvar(bufnr, '&modified')
-                let m='[+]'
+                let m                         = '[+]'
             endif
-            if buftype=='nofile'
-                if file=~'\/.'
-                    let file=substitute(file, '.*\/\ze.', '', '')
+            if buftype                       == 'nofile'
+                if file                      =~ '\/.'
+                    let file                  = substitute(file, '.*\/\ze.', '', '')
                 endif
             else
-                let file=fnamemodify(file, ':p:t')
+                let file                      = fnamemodify(file, ':p:t')
             endif
-            if file==''
-                let file='[No Name]'
+            if file                          == ''
+                let file                      = '[No Name]'
             endif
-            let s.=m
-            let s.=i.':'
-            let s.=file
-            let s.='['.winnr.']'
-            let s.=' '
-            let i=i+1
+            let s                            .= m
+            let s                            .= i.':'
+            let s                            .= file
+            let s                            .= '['.winnr.']'
+            let s                            .= ' '
+            let i                             = i+1
         endwhile
-        let s.='%T%#TabLineFill#%='
-        let s.=(tabpagenr('$')>1 ? '%999XX' : 'X')
+        let s                                .= '%T%#TabLineFill#%='
+        let s                                .= (tabpagenr('$')>1 ? '%999XX' : 'X')
         return s
     endfunction
     " Set tabline colorscheme
-    if g:ivim_default_scheme=='gruvbox'
-        let g:gruvbox_invert_tabline=1
+    if g:ivim_default_scheme                 == 'gruvbox'
+        let g:gruvbox_invert_tabline          = 1
     endif
     " Set up tab tooltips with each buffer name
-    set guitabtooltip=%F
+    set guitabtooltip                         = %F
 endif

 " Set status line
 if count(g:ivim_bundle_groups, 'ui')
-    set laststatus=2 " Show the statusline
+    set laststatus                            = 2 " Show the statusline
     set noshowmode " Hide the default mode text
     " Set status line colorscheme
-    if g:ivim_default_scheme=='hybrid'
-        let g:airline_theme='bubblegum'
-    elseif g:ivim_default_scheme=='tender'
-        let g:tender_airline=1
-        let g:airline_theme='tender'
+    if g:ivim_default_scheme                 == 'hybrid'
+        let g:airline_theme                   = 'bubblegum'
+    elseif g:ivim_default_scheme             == 'tender'
+        let g:tender_airline                  = 1
+        let g:airline_theme                   = 'tender'
     endif
-    set ttimeoutlen=50
-    let g:bufferline_echo=0
-    let g:bufferline_modified='[+]'
+    set ttimeoutlen                           = 50
+    let g:bufferline_echo                     = 0
+    let g:bufferline_modified                 = '[+]'
     if g:ivim_fancy_font
-        let g:airline_powerline_fonts=1
+        let g:airline_powerline_fonts         = 1
     else
-        let g:airline_left_sep=''
-        let g:airline_right_sep=''
+        let g:airline_left_sep                = ''
+        let g:airline_right_sep               = ''
     endif
 endif

 " Only have cursorline in current window and in normal window
 autocmd WinLeave * set nocursorline
-autocmd WinEnter * set cursorline
+" autocmd WinEnter * set cursorline
 autocmd InsertEnter * set nocursorline
-autocmd InsertLeave * set cursorline
+" autocmd InsertLeave * set cursorline
 set wildmenu " Show list instead of just completing
-set wildmode=list:longest,full " Use powerful wildmenu
-set shortmess=at " Avoids hit enter
+set wildmode                                  = list:longest,full " Use powerful wildmenu
+set shortmess                                 = at " Avoids hit enter
 set showcmd " Show cmd

-set backspace=indent,eol,start " Make backspaces delete sensibly
-set whichwrap+=h,l,<,>,[,] " Backspace and cursor keys wrap to
-set virtualedit=block,onemore " Allow for cursor beyond last character
-set scrolljump=5 " Lines to scroll when cursor leaves screen
-set scrolloff=3 " Minimum lines to keep above and below cursor
-set sidescroll=1 " Minimal number of columns to scroll horizontally
-set sidescrolloff=10 " Minimal number of screen columns to keep away from cursor
+set backspace                                 = indent,eol,start " Make backspaces delete sensibly
+set whichwrap                                += h,l,<,>,[,] " Backspace and cursor keys wrap to
+set virtualedit                               = block,onemore " Allow for cursor beyond last character
+set scrolljump                                = 5 " Lines to scroll when cursor leaves screen
+set scrolloff                                 = 3 " Minimum lines to keep above and below cursor
+set sidescroll                                = 1 " Minimal number of columns to scroll horizontally
+set sidescrolloff                             = 10 " Minimal number of screen columns to keep away from cursor

 set showmatch " Show matching brackets/parenthesis
-set matchtime=2 " Decrease the time to blink
+set matchtime                                 = 2 " Decrease the time to blink

 if g:ivim_show_number
     set number " Show line numbers
@@ -354,26 +352,26 @@ if g:ivim_show_number
     nnoremap <Leader>n :set relativenumber!<CR>
 endif

-set formatoptions+=rnlmM " Optimize format options
+set formatoptions                            += rnlmM " Optimize format options
 set wrap " Set wrap
-set textwidth=80 " Change text width
+set textwidth                                 = 80 " Change text width
 if g:ivim_fancy_font
-    set list " Show these tabs and spaces and so on
-    set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮ " Change listchars
+    " set list " Show these tabs and spaces and so on
+    set listchars                             = tab:▸\ ,eol:¬,extends:❯,precedes:❮ " Change listchars
     set linebreak " Wrap long lines at a blank
-    set showbreak=↪  " Change wrap line break
-    set fillchars=diff:⣿,vert:│ " Change fillchars
-    augroup trailing " Only show trailing whitespace when not in insert mode
-        autocmd!
-        autocmd InsertEnter * :set listchars-=trail:⌴
-        autocmd InsertLeave * :set listchars+=trail:⌴
-    augroup END
+    " set showbreak=↪  " Change wrap line break
+    " set fillchars=diff:⣿,vert:│ " Change fillchars
+    " augroup trailing " Only show trailing whitespace when not in insert mode
+    "     autocmd!
+    "     autocmd InsertEnter * :set listchars-=trail:⌴
+    "     autocmd InsertLeave * :set listchars+=trail:⌴
+    " augroup END
 endif

 " Set gVim UI setting
 if has('gui_running')
-    set guioptions-=m
-    set guioptions-=T
+    set guioptions                           -= m
+    set guioptions                           -= T
 endif

 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
@@ -383,9 +381,9 @@ endif
 "-------------------------------------------------

 syntax on " Enable syntax
-set background=dark " Set background
+background                                = dark " Set background
 if !has('gui_running')
-    set t_Co=256 " Use 256 colors
+    set t_Co                                  = 256 " Use 256 colors
 endif

 " Use true colors
@@ -397,11 +395,11 @@ endif

 " Load a colorscheme
 if count(g:ivim_bundle_groups, 'ui')
-    if g:ivim_default_scheme=='hybrid'
+    if g:ivim_default_scheme                 == 'hybrid'
         colorscheme hybrid_reverse
-    elseif g:ivim_default_scheme=='gruvbox'
+    elseif g:ivim_default_scheme             == 'gruvbox'
         colorscheme gruvbox
-    elseif g:ivim_default_scheme=='tender'
+    elseif g:ivim_default_scheme             == 'tender'
         colorscheme tender
     endif
 else
@@ -411,9 +409,9 @@ endif
 " Set GUI font
 if has('gui_running')
     if has('gui_gtk')
-        set guifont=DejaVu\ Sans\ Mono\ 18
+        set guifont                           = Hack:18
     else
-        set guifont=DejaVu\ Sans\ Mono:h18
+        set guifont                           = Hack:h18
     endif
 endif

@@ -426,8 +424,8 @@ endif
 set autoindent " Preserve current indent on new lines
 set cindent " set C style indent
 set expandtab " Convert all tabs typed to spaces
-set softtabstop=4 " Indentation levels every four columns
-set shiftwidth=4 " Indent/outdent by four columns
+set softtabstop                               = 2 " Indentation levels every four columns
+set shiftwidth                                = 2 " Indent/outdent by four columns
 set shiftround " Indent/outdent to nearest tabstop

 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
@@ -459,26 +457,26 @@ nnoremap <Leader><Space> :set hlsearch!<CR>
 " => Fold Related
 "-------------------------------------------------

-set foldlevelstart=0 " Start with all folds closed
-set foldcolumn=1 " Set fold column
+set foldlevelstart                            = 0 " Start with all folds closed
+set foldcolumn                                = 1 " Set fold column

 " Space to toggle and create folds.
-nnoremap <silent> <Space> @=(foldlevel('.') ? 'za' : '\<Space>')<CR>
+nnoremap <silent> <Space> @                   = (foldlevel('.') ? 'za' : '\<Space>')<CR>
 vnoremap <Space> zf

 " Set foldtext
 function! MyFoldText()
-    let line=getline(v:foldstart)
-    let nucolwidth=&foldcolumn+&number*&numberwidth
-    let windowwidth=winwidth(0)-nucolwidth-3
-    let foldedlinecount=v:foldend-v:foldstart+1
-    let onetab=strpart('          ', 0, &tabstop)
-    let line=substitute(line, '\t', onetab, 'g')
-    let line=strpart(line, 0, windowwidth-2-len(foldedlinecount))
-    let fillcharcount=windowwidth-len(line)-len(foldedlinecount)
+    let line                                  = getline(v:foldstart)
+    let nucolwidth                            = &foldcolumn+&number*&numberwidth
+    let windowwidth                           = winwidth(0)-nucolwidth-3
+    let foldedlinecount                       = v:foldend-v:foldstart+1
+    let onetab                                = strpart('          ', 0, &tabstop)
+    let line                                  = substitute(line, '\t', onetab, 'g')
+    let line                                  = strpart(line, 0, windowwidth-2-len(foldedlinecount))
+    let fillcharcount                         = windowwidth-len(line)-len(foldedlinecount)
     return line.'…'.repeat(' ',fillcharcount).foldedlinecount.'L'.' '
 endfunction
-set foldtext=MyFoldText()
+set foldtext                                  = MyFoldText()

 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

@@ -517,13 +515,13 @@ nnoremap J mzJ`z
 nnoremap vaa ggvGg_

 " Strip all trailing whitespace in the current file
-nnoremap <Leader>q :%s/\s\+$//<CR>:let @/=''<CR>
+nnoremap <Leader>q :%s/\s\+$//<CR>:let @     /= ''<CR>

 " Modify all the indents
-nnoremap \= gg=G
+nnoremap \                                    = gg=G

 " See the differences between the current buffer and the file it was loaded from
-command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_
+command! DiffOrig vert new | set bt           = nofile | r ++edit # | 0d_
             \ | diffthis | wincmd p | diffthis

 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
@@ -536,29 +534,29 @@ command! DiffOrig vert new | set bt=nofile | r ++edit # | 0d_
 if count(g:ivim_bundle_groups, 'ui')

     " -> Startify
-    let g:startify_session_dir=$HOME . '/.vim/session'
-    let g:startify_custom_header=[
+    let g:startify_session_dir                = $HOME . '/.vim/session'
+    let g:startify_custom_header              = [
                 \'       _       _         ',
                 \'      (_)   __(_)___ ___ ',
                 \'     / / | / / / __ `__ \',
                 \'    / /| |/ / / / / / / /',
                 \'   /_/ |___/_/_/ /_/ /_/ ',
                 \'                         ']
-    let g:startify_custom_footer=['', '    This configuration is maintained by Xiao-Ou Zhang <kepbod@gmail.com> and other contributors. Thanks!']
+    let g:startify_custom_footer              = ['', '    This configuration is maintained by Xiao-Ou Zhang <kepbod@gmail.com> and other contributors. Thanks!']
     if has('gui_running')
-        hi StartifyHeader  guifg=#87afff
-        hi StartifyFooter  guifg=#87afff
-        hi StartifyBracket guifg=#585858
-        hi StartifyNumber  guifg=#ffaf5f
-        hi StartifyPath    guifg=#8a8a8a
-        hi StartifySlash   guifg=#585858
+        hi StartifyHeader  guifg             =# 87afff
+        hi StartifyFooter  guifg             =# 87afff
+        hi StartifyBracket guifg             =# 585858
+        hi StartifyNumber  guifg             =# ffaf5f
+        hi StartifyPath    guifg             =# 8a8a8a
+        hi StartifySlash   guifg             =# 585858
     else
-        hi StartifyHeader  ctermfg=111
-        hi StartifyFooter  ctermfg=111
-        hi StartifyBracket ctermfg=240
-        hi StartifyNumber  ctermfg=215
-        hi StartifyPath    ctermfg=245
-        hi StartifySlash   ctermfg=240
+        hi StartifyHeader  ctermfg            = 111
+        hi StartifyFooter  ctermfg            = 111
+        hi StartifyBracket ctermfg            = 240
+        hi StartifyNumber  ctermfg            = 215
+        hi StartifyPath    ctermfg            = 245
+        hi StartifySlash   ctermfg            = 240
     endif

     " -> Goyo & Limelight
@@ -571,14 +569,14 @@ endif
 if count(g:ivim_bundle_groups, 'enhance')

     " -> delimitMate
-    let delimitMate_expand_cr=1
-    let delimitMate_expand_space=1
-    let delimitMate_balance_matchpairs=1
+    let delimitMate_expand_cr                 = 1
+    let delimitMate_expand_space              = 1
+    let delimitMate_balance_matchpairs        = 1

     " -> Tcomment
     " Map \<Space> to commenting
     function! IsWhiteLine()
-        if (getline('.')=~'^$')
+        if (getline('.')                     =~ '^$')
             exe 'TCommentBlock'
             normal! j
         else
@@ -591,49 +589,30 @@ if count(g:ivim_bundle_groups, 'enhance')
     endfunction
     nnoremap <silent> <LocalLeader><Space> :call IsWhiteLine()<CR>

-    " -> Multiple cursors
-    " Called once right before you start selecting multiple cursors
-    if g:ivim_autocomplete=='NEO'
-        function! Multiple_cursors_before()
-            if g:ivim_completion_engine=='neocomplete'
-                exe 'NeoCompleteLock'
-            else
-                exe 'NeoComplCacheLock'
-            endif
-        endfunction
-        " Called once only when the multiple selection is canceled (default <Esc>)
-        function! Multiple_cursors_after()
-            if g:ivim_completion_engine=='neocomplete'
-                exe 'NeoCompleteUnlock'
-            else
-                exe 'NeoComplCacheUnlock'
-            endif
-        endfunction
-    endif
-
     " -> Undo tree
     nnoremap <Leader>u :UndotreeToggle<CR>
-    let g:undotree_SetFocusWhenToggle=1
+    let g:undotree_SetFocusWhenToggle         = 1

     " -> Easy Align
     xmap ga <Plug>(EasyAlign)
     nmap ga <Plug>(EasyAlign)

     " -> Gutentags
-    let g:gutentags_cache_dir=$HOME . '/.vim/cache/ctags'
+    let g:gutentags_cache_dir                 = $HOME . '/.vim/cache/ctags'

     " -> Splitjoin
-    let g:splitjoin_split_mapping = ',s'
-    let g:splitjoin_join_mapping  = ',j'
-    let g:splitjoin_normalize_whitespace=1
-    let g:splitjoin_align=1
+    let g:splitjoin_split_mapping             = ',s'
+    let g:splitjoin_join_mapping              = ',j'
+    let g:splitjoin_normalize_whitespace      = 1
+    let g:splitjoin_align                     = 1

     " -> Investigate.vim
     nnoremap K :call investigate#Investigate()<CR>
-    let g:investigate_use_dash=1
+    " let g:investigate_use_dash=1
+

     " -> EnhancedDiff
-    let &diffexpr='EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'
+    let &diffexpr                             = 'EnhancedDiff#Diff("git diff", "--diff-algorithm=patience")'

 endif

@@ -642,10 +621,10 @@ if count(g:ivim_bundle_groups, 'move')

     " -> Tag bar
     nnoremap <Leader>t :TagbarToggle<CR>
-    let g:tagbar_autofocus=1
-    let g:tagbar_expand=1
-    let g:tagbar_foldlevel=2
-    let g:tagbar_autoshowtag=1
+    let g:tagbar_autofocus                    = 1
+    let g:tagbar_expand                       = 1
+    let g:tagbar_foldlevel                    = 2
+    let g:tagbar_autoshowtag                  = 1

     " Matchit
     " Start mathit
@@ -661,10 +640,10 @@ if count(g:ivim_bundle_groups, 'navigate')

     " -> NERD Tree
     nnoremap <Leader>f :NERDTreeToggle<CR>
-    let NERDTreeChDirMode=2
-    let NERDTreeShowBookmarks=1
-    let NERDTreeShowHidden=1
-    let NERDTreeShowLineNumbers=1
+    let NERDTreeChDirMode                     = 2
+    let NERDTreeShowBookmarks                 = 1
+    let NERDTreeShowHidden                    = 1
+    let NERDTreeShowLineNumbers               = 1
     augroup nerd_loader
         autocmd!
         autocmd VimEnter * silent! autocmd! FileExplorer
@@ -678,96 +657,95 @@ if count(g:ivim_bundle_groups, 'navigate')
 endif

 " Setting for completion plugins
-if count(g:ivim_bundle_groups, 'complete')
-
-    if g:ivim_autocomplete=='NEO'
-        " -> Neocomplete & Neocomplcache
-        " Use Tab and S-Tab to select candidate
-        inoremap <expr><Tab>  pumvisible() ? "\<C-N>" : "\<Tab>"
-        inoremap <expr><S-Tab> pumvisible() ? "\<C-P>" : "\<S-Tab>"
-        if g:ivim_completion_engine=='neocomplete'
-            let g:neocomplete#enable_at_startup=1
-            let g:neocomplete#data_directory=$HOME . '/.vim/cache/neocomplete'
-            let g:neocomplete#enable_auto_delimiter=1
-            " Use <C-E> to close popup
-            inoremap <expr><C-E> neocomplete#cancel_popup()
-            inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
-                        \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
-                        \ pumvisible() ? neocomplete#close_popup() : "\<CR>"
-        else
-            let g:neocomplcache_enable_at_startup=1
-            let g:neocomplcache_temporary_dir=$HOME . '/.vim/cache/neocomplcache'
-            let g:neocomplcache_enable_auto_delimiter=1
-            let g:neocomplcache_enable_fuzzy_completion=1
-            " Use <C-E> to close popup
-            inoremap <expr><C-E> neocomplcache#cancel_popup()
-            inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
-                        \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
-                        \ pumvisible() ? neocomplcache#close_popup() : "\<CR>"
-        endif
-        " Setting for specific language
-        if has('lua')
-            if !exists('g:neocomplete#force_omni_input_patterns')
-                let g:neocomplete#force_omni_input_patterns={}
-            endif
-            let g:neocomplete#force_omni_input_patterns.python=
-            \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
-        else
-            if !exists('g:neocomplcache_force_omni_patterns')
-                let g:neocomplcache_force_omni_patterns={}
-            endif
-            let g:neocomplcache_force_omni_patterns.python=
-            \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
-        endif
-        autocmd FileType python setlocal omnifunc=jedi#completions
-        let g:jedi#completions_enabled=0
-        let g:jedi#auto_vim_configuration=0
-        let g:jedi#smart_auto_mappings=0
-        let g:jedi#use_tabs_not_buffers=1
-        let g:tmuxcomplete#trigger=''
-        " -> Neosnippet
-        " Set information for snippets
-        let g:neosnippet#enable_snipmate_compatibility=1
-        " Use <C-K> to expand or jump snippets in insert mode
-        imap <C-K> <Plug>(neosnippet_expand_or_jump)
-        " Use <C-K> to replace TARGET within snippets in visual mode
-        xmap <C-K> <Plug>(neosnippet_start_unite_snippet_target)
-        " For snippet_complete marker
-        if has('conceal')
-            set conceallevel=2 concealcursor=i
-        endif
-    else
-        " -> UltiSnips
-        let g:UltiSnipsExpandTrigger="<C-K>"
-        let g:UltiSnipsJumpForwardTrigger="<Tab>"
-        let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
-    endif
-
-    " Setting info for snips
-    let g:snips_author=g:ivim_user
-    let g:snips_email=g:ivim_email
-    let g:snips_github=g:ivim_github
-
-endif
+" if count(g:ivim_bundle_groups, 'complete')
+"     if g:ivim_autocomplete=='NEO'
+"         " -> Neocomplete & Neocomplcache
+"         " Use Tab and S-Tab to select candidate
+"         inoremap <expr><Tab>  pumvisible() ? "\<C-N>" : "\<Tab>"
+"         inoremap <expr><S-Tab> pumvisible() ? "\<C-P>" : "\<S-Tab>"
+"         if g:ivim_completion_engine=='neocomplete'
+"             let g:neocomplete#enable_at_startup=1
+"             let g:neocomplete#data_directory=$HOME . '/.vim/cache/neocomplete'
+"             let g:neocomplete#enable_auto_delimiter=1
+"             " Use <C-E> to close popup
+"             inoremap <expr><C-E> neocomplete#cancel_popup()
+"             inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
+"                         \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
+"                         \ pumvisible() ? neocomplete#close_popup() : "\<CR>"
+"         else
+"             let g:neocomplcache_enable_at_startup=1
+"             let g:neocomplcache_temporary_dir=$HOME . '/.vim/cache/neocomplcache'
+"             let g:neocomplcache_enable_auto_delimiter=1
+"             let g:neocomplcache_enable_fuzzy_completion=1
+"             " Use <C-E> to close popup
+"             inoremap <expr><C-E> neocomplcache#cancel_popup()
+"             inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
+"                         \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
+"                         \ pumvisible() ? neocomplcache#close_popup() : "\<CR>"
+"         endif
+"         " Setting for specific language
+"         if has('lua')
+"             if !exists('g:neocomplete#force_omni_input_patterns')
+"                 let g:neocomplete#force_omni_input_patterns={}
+"             endif
+"             let g:neocomplete#force_omni_input_patterns.python=
+"             \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
+"         else
+"             if !exists('g:neocomplcache_force_omni_patterns')
+"                 let g:neocomplcache_force_omni_patterns={}
+"             endif
+"             let g:neocomplcache_force_omni_patterns.python=
+"             \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
+"         endif
+"         autocmd FileType python setlocal omnifunc=jedi#completions
+"         let g:jedi#completions_enabled=0
+"         let g:jedi#auto_vim_configuration=0
+"         let g:jedi#smart_auto_mappings=0
+"         let g:jedi#use_tabs_not_buffers=1
+"         let g:tmuxcomplete#trigger=''
+"         " -> Neosnippet
+"         " Set information for snippets
+"         let g:neosnippet#enable_snipmate_compatibility=1
+"         " Use <C-K> to expand or jump snippets in insert mode
+"         imap <C-K> <Plug>(neosnippet_expand_or_jump)
+"         " Use <C-K> to replace TARGET within snippets in visual mode
+"         xmap <C-K> <Plug>(neosnippet_start_unite_snippet_target)
+"         " For snippet_complete marker
+"         if has('conceal')
+"             set conceallevel=2 concealcursor=i
+"         endif
+"     else
+"         " -> UltiSnips
+"         let g:UltiSnipsExpandTrigger="<C-K>"
+"         let g:UltiSnipsJumpForwardTrigger="<Tab>"
+"         let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
+"     endif
+"
+"     " Setting info for snips
+"     let g:snips_author=g:ivim_user
+"     let g:snips_email=g:ivim_email
+"     let g:snips_github=g:ivim_github
+"
+" endif

 " Setting for compiling plugins
 if count(g:ivim_bundle_groups, 'compile')

     " -> Syntastic
-    let g:syntastic_check_on_open=1
-    let g:syntastic_aggregate_errors=1
-    let g:syntastic_auto_jump=1
-    let g:syntastic_auto_loc_list=1
Downloads                                     Vim-plug                                      react-tutorial-tic-tac-toe                    ttd
Dropbox                                       app-assessment-mod-0                          recruitment-assessment-A                      twe4ked
-        let g:syntastic_error_symbol = '✗'
-        let g:syntastic_style_error_symbol = '✠'
-        let g:syntastic_warning_symbol = '∆'
-        let g:syntastic_style_warning_symbol = '≈'
+        let g:syntastic_error_symbol          = '✗'
+        let g:syntastic_style_error_symbol    = '✠'
+        let g:syntastic_warning_symbol        = '∆'
+        let g:syntastic_style_warning_symbol  = '≈'
     endif

     " -> Singlecompile
     nnoremap <Leader>r :SingleCompileRun<CR>
-    let g:SingleCompile_showquickfixiferror=1
+    let g:SingleCompile_showquickfixiferror   = 1

 endif

@@ -779,12 +757,12 @@ endif
 if count(g:ivim_bundle_groups, 'language')

     " -> Emmet
-    let g:user_emmet_leader_key='<C-Z>'
-    let g:user_emmet_settings={'indentation':'    '}
-    let g:use_emmet_complete_tag=1
+    let g:user_emmet_leader_key               = '<C-Z>'
+    let g:user_emmet_settings                 = {'indentation':'    '}
+    let g:use_emmet_complete_tag              = 1

     " -> Polyglot
-    let g:vim_markdown_conceal=0
+    let g:vim_markdown_conceal                = 0

 endif

@@ -807,3 +785,16 @@ if has('gui_running')
 endif

 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+set notermguicolors
+
+" When invoked, unless a starting directory is specified, CtrlP will set its local working directory according to this variable:
+let g:ctrlp_working_path_mode                 = 'ra'
+
+" use gitignore files
+let g:ctrlp_user_command                      = ['.git', 'cd %s && git ls-files -co --exclude-standard']
+
+" shift + k = search in devdocs.io
+let g:investigate_url_for_javascript          = "http://devdocs.io/^s"
+    let g:syntastic_check_on_open             = 1
+    let g:syntastic_aggregate_errors          = 1
+    let g:syntastic_auto_jump                 = 1
+    let g:syntastic_auto_loc_list             = 1
     if g:ivim_fancy_font
-        let g:syntastic_error_symbol = '✗'
-        let g:syntastic_style_error_symbol = '✠'
-        let g:syntastic_warning_symbol = '∆'
-        let g:syntastic_style_warning_symbol = '≈'
+        let g:syntastic_error_symbol          = '✗'
+        let g:syntastic_style_error_symbol    = '✠'
+        let g:syntastic_warning_symbol        = '∆'
+        let g:syntastic_style_warning_symbol  = '≈'
     endif

     " -> Singlecompile
     nnoremap <Leader>r :SingleCompileRun<CR>
-    let g:SingleCompile_showquickfixiferror=1
+    let g:SingleCompile_showquickfixiferror   = 1

 endif

@@ -779,12 +757,12 @@ endif
 if count(g:ivim_bundle_groups, 'language')

     " -> Emmet
-    let g:user_emmet_leader_key='<C-Z>'
-    let g:user_emmet_settings={'indentation':'    '}
-    let g:use_emmet_complete_tag=1
+    let g:user_emmet_leader_key               = '<C-Z>'
+    let g:user_emmet_settings                 = {'indentation':'    '}
+    let g:use_emmet_complete_tag              = 1

     " -> Polyglot
-    let g:vim_markdown_conceal=0
+    let g:vim_markdown_conceal                = 0

 endif

@@ -807,3 +785,16 @@ if has('gui_running')
 endif

 """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+
+set notermguicolors
+
+" When invoked, unless a starting directory is specified, CtrlP will set its local working directory according to this variable:
+let g:ctrlp_working_path_mode                 = 'ra'
+
+" use gitignore files
+let g:ctrlp_user_command                      = ['.git', 'cd %s && git ls-files -co --exclude-standard']
+
+" shift + k = search in devdocs.io
lines 833-885/888 100%
-            let g:neocomplete#force_omni_input_patterns.python=
-            \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
-        else
-            if !exists('g:neocomplcache_force_omni_patterns')
-                let g:neocomplcache_force_omni_patterns={}
-            endif
-            let g:neocomplcache_force_omni_patterns.python=
-            \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
-        endif
-        autocmd FileType python setlocal omnifunc=jedi#completions
-        let g:jedi#completions_enabled=0
-        let g:jedi#auto_vim_configuration=0
-        let g:jedi#smart_auto_mappings=0
-        let g:jedi#use_tabs_not_buffers=1
-        let g:tmuxcomplete#trigger=''
-        " -> Neosnippet
-        " Set information for snippets
-        let g:neosnippet#enable_snipmate_compatibility=1
-        " Use <C-K> to expand or jump snippets in insert mode
-        imap <C-K> <Plug>(neosnippet_expand_or_jump)
-        " Use <C-K> to replace TARGET within snippets in visual mode
-        xmap <C-K> <Plug>(neosnippet_start_unite_snippet_target)
-        " For snippet_complete marker
-        if has('conceal')
-            set conceallevel=2 concealcursor=i
-        endif
-    else
-        " -> UltiSnips
-        let g:UltiSnipsExpandTrigger="<C-K>"
-        let g:UltiSnipsJumpForwardTrigger="<Tab>"
-        let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
-    endif
-
-    " Setting info for snips
-    let g:snips_author=g:ivim_user
-    let g:snips_email=g:ivim_email
-    let g:snips_github=g:ivim_github
-
-endif
+" if count(g:ivim_bundle_groups, 'complete')
+"     if g:ivim_autocomplete=='NEO'
+"         " -> Neocomplete & Neocomplcache
+"         " Use Tab and S-Tab to select candidate
+"         inoremap <expr><Tab>  pumvisible() ? "\<C-N>" : "\<Tab>"
+"         inoremap <expr><S-Tab> pumvisible() ? "\<C-P>" : "\<S-Tab>"
+"         if g:ivim_completion_engine=='neocomplete'
+"             let g:neocomplete#enable_at_startup=1
+"             let g:neocomplete#data_directory=$HOME . '/.vim/cache/neocomplete'
+"             let g:neocomplete#enable_auto_delimiter=1
-        " Set information for snippets
-        let g:neosnippet#enable_snipmate_compatibility=1
-        " Use <C-K> to expand or jump snippets in insert mode
-        imap <C-K> <Plug>(neosnippet_expand_or_jump)
-        " Use <C-K> to replace TARGET within snippets in visual mode
-        xmap <C-K> <Plug>(neosnippet_start_unite_snippet_target)
-        " For snippet_complete marker
-        if has('conceal')
-            set conceallevel=2 concealcursor=i
-        endif
-    else
-        " -> UltiSnips
-        let g:UltiSnipsExpandTrigger="<C-K>"
-        let g:UltiSnipsJumpForwardTrigger="<Tab>"
-        let g:UltiSnipsJumpBackwardTrigger="<S-Tab>"
-    endif
-
-    " Setting info for snips
-    let g:snips_author=g:ivim_user
-    let g:snips_email=g:ivim_email
-    let g:snips_github=g:ivim_github
-
-endif
+" if count(g:ivim_bundle_groups, 'complete')
+"     if g:ivim_autocomplete=='NEO'
+"         " -> Neocomplete & Neocomplcache
+"         " Use Tab and S-Tab to select candidate
+"         inoremap <expr><Tab>  pumvisible() ? "\<C-N>" : "\<Tab>"
+"         inoremap <expr><S-Tab> pumvisible() ? "\<C-P>" : "\<S-Tab>"
+"         if g:ivim_completion_engine=='neocomplete'
+"             let g:neocomplete#enable_at_startup=1
+"             let g:neocomplete#data_directory=$HOME . '/.vim/cache/neocomplete'
+"             let g:neocomplete#enable_auto_delimiter=1
+"             " Use <C-E> to close popup
+"             inoremap <expr><C-E> neocomplete#cancel_popup()
+"             inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
+"                         \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
+"                         \ pumvisible() ? neocomplete#close_popup() : "\<CR>"
+"         else
+"             let g:neocomplcache_enable_at_startup=1
+"             let g:neocomplcache_temporary_dir=$HOME . '/.vim/cache/neocomplcache'
+"             let g:neocomplcache_enable_auto_delimiter=1
+"             let g:neocomplcache_enable_fuzzy_completion=1
+"             " Use <C-E> to close popup
+"             inoremap <expr><C-E> neocomplcache#cancel_popup()
+"             inoremap <expr><C-E> neocomplcache#cancel_popup()
+"             inoremap <expr><CR> delimitMate#WithinEmptyPair() ?
+"                         \ "\<C-R>=delimitMate#ExpandReturn()\<CR>" :
+"                         \ pumvisible() ? neocomplcache#close_popup() : "\<CR>"
+"         endif
+"         " Setting for specific language
+"         if has('lua')
+"             if !exists('g:neocomplete#force_omni_input_patterns')
+"                 let g:neocomplete#force_omni_input_patterns={}
+"             endif
+"             let g:neocomplete#force_omni_input_patterns.python=
+"             \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
+"         else
+"             if !exists('g:neocomplcache_force_omni_patterns')
+"                 let g:neocomplcache_force_omni_patterns={}
+"             endif
+"             let g:neocomplcache_force_omni_patterns.python=
+"             \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
             normal! j
         else
@@ -591,49 +589,30 @@ if count(g:ivim_bundle_groups, 'enhance')
     endfunction
     nnoremap <silent> <LocalLeader><Space> :call IsWhiteLine()<CR>

-    " -> Multiple cursors
-    " Called once right before you start selecting multiple cursors
-    if g:ivim_autocomplete=='NEO'
-        function! Multiple_cursors_before()
-            if g:ivim_completion_engine=='neocomplete'
-                exe 'NeoCompleteLock'
-            else
-                exe 'NeoComplCacheLock'
-            endif
-        endfunction
-        " Called once only when the multiple selection is canceled (default <Esc>)
-        function! Multiple_cursors_after()
-            if g:ivim_completion_engine=='neocomplete'
-                exe 'NeoCompleteUnlock'
-            else
-                exe 'NeoComplCacheUnlock'
-            endif
-        endfunction
-    endif
-
     " -> Undo tree
     nnoremap <Leader>u :UndotreeToggle<CR>
diff --git a/vimrc b/vimrc
index 878d9be..b107f13 100644
--- a/vimrc
+++ b/vimrc
@@ -1,9 +1,3 @@
-"       _       _
-"      (_)   __(_)___ ___
-"     / / | / / / __ `__ \
-"    / /| |/ / / / / / / /
-"   /_/ |___/_/_/ /_/ /_/
-"
 "   Main Contributor: Xiao-Ou Zhang (kepbod) <kepbod@gmail.com>
 "   Version: 3.0
 "   Created: 2012-01-20
@@ -33,19 +27,15 @@
 "------------------------------------------------

 " ivim user setting
-let g:ivim_user='Xiao-Ou Zhang' " User name
-let g:ivim_email='kepbod@gmail.com' " User email
-let g:ivim_github='https://github.com/kepbod' " User github
 " ivim color settings (hybrid, gruvbox or tender)
-let g:ivim_default_scheme='hybrid'
+let g:ivim_default_scheme                     = 'gruvbox'
 " ivim ui setting
-let g:ivim_fancy_font=1 " Enable using fancy font
-let g:ivim_show_number=1 " Enable showing number
+let g:ivim_fancy_font                         = 1 " Enable using fancy font
+" let g:ivim_show_n
 " ivim autocomplete setting (YCM or NEO)
-let g:ivim_autocomplete='NEO'
+" let g:ivim_autocomplete='NEO'
 " ivim plugin setting
-let g:ivim_bundle_groups=['ui', 'enhance', 'move', 'navigate',
-            \'complete', 'compile', 'git', 'language']
+let g:ivim_bundle_groups                      = ['ui', 'enhance', 'move', 'navigate', 'git', 'language']

 " Customise ivim settings for personal usage
 if filereadable(expand($HOME . '/.vimrc.ivim.local'))
diff --git a/vimrc b/vimrc
index 878d9be..b107f13 100644
--- a/vimrc
+++ b/vimrc
@@ -1,9 +1,3 @@
-"       _       _
-"      (_)   __(_)___ ___
-"     / / | / / / __ `__ \
-"    / /| |/ / / / / / / /
-"   /_/ |___/_/_/ /_/ /_/
-"
 "   Main Contributor: Xiao-Ou Zhang (kepbod) <kepbod@gmail.com>
 "   Version: 3.0
 "   Created: 2012-01-20
@@ -33,19 +27,15 @@
 "------------------------------------------------

 " ivim user setting
-let g:ivim_user='Xiao-Ou Zhang' " User name
-let g:ivim_email='kepbod@gmail.com' " User email
-let g:ivim_github='https://github.com/kepbod' " User github
 " ivim color settings (hybrid, gruvbox or tender)
-let g:ivim_default_scheme='hybrid'
+let g:ivim_default_scheme                     = 'gruvbox'
 " ivim ui setting
-let g:ivim_fancy_font=1 " Enable using fancy font
-let g:ivim_show_number=1 " Enable showing number
+let g:ivim_fancy_font                         = 1 " Enable using fancy font
+" let g:ivim_show_n
 " ivim autocomplete setting (YCM or NEO)
-let g:ivim_autocomplete='NEO'
+" let g:ivim_autocomplete='NEO'
 " ivim plugin setting
-let g:ivim_bundle_groups=['ui', 'enhance', 'move', 'navigate',
-            \'complete', 'compile', 'git', 'language']
+let g:ivim_bundle_groups                      = ['ui', 'enhance', 'move', 'navigate', 'git', 'language']

 " Customise ivim settings for personal usage
 if filereadable(expand($HOME . '/.vimrc.ivim.local'))
@@ -60,9 +50,9 @@ endif

 set nocompatible " Get out of vi compatible mode
 filetype plugin indent on " Enable filetype
-let mapleader=',' " Change the mapleader
-let maplocalleader='\' " Change the maplocalleader
-set timeoutlen=500 " Time to wait for a command
+let mapleader                                 = ',' " Change the mapleader
+let maplocalleader                            = '\' " Change the maplocalleader
+set timeoutlen                                = 500 " Time to wait for a command

 " Source the vimrc file after saving it
 autocmd BufWritePost $MYVIMRC source $MYVIMRC
@@ -73,39 +63,41 @@ set autoread " Set autoread when a file is changed outside
 set autowrite " Write on make/shell commands
 set hidden " Turn on hidden"

-set history=1000 " Increase the lines of history
+set history                                   = 1000 " Increase the lines of history
 set modeline " Turn on modeline
-set encoding=utf-8 " Set utf-8 encoding
-set completeopt+=longest " Optimize auto complete
-set completeopt-=preview " Optimize auto complete
+set encoding                                  = utf-8 " Set utf-8 encoding
+set completeopt                              += longest " Optimize auto complete
+set completeopt                              += preview " Optimize auto complete

 set undofile " Set undo

 " Set directories
 function! InitializeDirectories()
-    let parent=$HOME
-    let prefix='.vim'
-    let dir_list={
+    let parent                                = $HOME
+    let prefix                                = '.vim'
+    let dir_list                              = {
                 \ 'backup': 'backupdir',
                 \ 'view': 'viewdir',
                 \ 'swap': 'directory',
                 \ 'undo': 'undodir',
                 \ 'cache': '',
                 \ 'session': ''}
+
     for [dirname, settingname] in items(dir_list)
-        let directory=parent.'/'.prefix.'/'.dirname.'/'
+        let directory                         = parent.'/'.prefix.'/'.dirname.'/'
         if !isdirectory(directory)
             if exists('*mkdir')
-                let dir = substitute(directory, "/$", "", "")
+                let dir                       = substitute(directory, "/$", "", "")
                 call mkdir(dir, 'p')
             else
                 echo 'Warning: Unable to create directory: '.directory
             endif
         endif
-        if settingname!=''
+        if settingname                       != ''
             exe 'set '.settingname.'='.directory
         endif
     endfor
+
 endfunction
 call InitializeDirectories()

@@ -120,13 +112,11 @@ autocmd BufWinEnter *.* silent! loadview " Make Vim load view (state) (folds, cu

 " On Windows, also use .vim instead of vimfiles
 if has('win32') || has('win64')
-    set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
+    set runtimepath                           = $HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
 endif

-set viewoptions+=slash,unix " Better Unix/Windows compatibility
-set viewoptions-=options " in case of mapping change
-
-""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
+set viewoptions                              += slash,unix " Better Unix/Windows compatibility
+set viewoptions                              -= options " in case of mapping change

 "--------------------------------------------------
 " => Vim-plug
@@ -154,10 +144,19 @@ if count(g:ivim_bundle_groups, 'ui') " UI setting
 endif

 if count(g:ivim_bundle_groups, 'enhance') " Vim enhancement
+    Plug 'vimwiki/vimwiki'
+    Plug 'ctrlpvim/ctrlp.vim'
+    if has('nvim')
+      Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
+    else
+      Plug 'Shougo/deoplete.nvim'
+      Plug 'roxma/nvim-yarp'
+      Plug 'roxma/vim-hug-neovim-rpc'
+    endif
+
     Plug 'Raimondi/delimitMate' " Closing of quotes
     Plug 'tomtom/tcomment_vim' " Commenter
     Plug 'tpope/vim-abolish' " Abolish
-    Plug 'tpope/vim-speeddating' " Speed dating
     Plug 'tpope/vim-repeat' " Repeat
     Plug 'terryma/vim-multiple-cursors' " Multiple cursors
     Plug 'junegunn/vim-slash' " In-buffer search
@@ -178,7 +177,6 @@ if count(g:ivim_bundle_groups, 'move') " Moving
     Plug 'tpope/vim-unimpaired' " Pairs of mappings
     Plug 'Lokaltog/vim-easymotion' " Easy motion
     Plug 'kepbod/quick-scope' " Quick scope
-    Plug 'yuttie/comfortable-motion.vim' " Comfortable motion
     Plug 'bkad/CamelCaseMotion' " Camel case motion
     Plug 'majutsushi/tagbar' " Tag bar
     Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all'  } " Fuzzy finder
@@ -188,35 +186,35 @@ endif
 if count(g:ivim_bundle_groups, 'navigate') " Navigation
     Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' } " NERD tree
     Plug 'Xuyuanp/nerdtree-git-plugin', { 'on': 'NERDTreeToggle' } " NERD tree git plugin
-    Plug 'mhinz/vim-tmuxify' " Tmux panes
+    " Plug 'mhinz/vim-tmuxify' " Tmux panes
 endif

-if count(g:ivim_bundle_groups, 'complete') " Completion
-    if g:ivim_autocomplete=='NEO'
-        if has('lua')
-            let g:ivim_completion_engine='neocomplete'
-            Plug 'Shougo/neocomplete.vim' " Auto completion framework
-        else
-            let g:ivim_completion_engine='neocomplcache'
-            Plug 'Shougo/neocomplcache.vim' " Auto completion framework
-        endif
-        Plug 'Shougo/neosnippet.vim' " Snippet engine
-        Plug 'Shougo/neosnippet-snippets' " Snippets
-        Plug 'Shougo/vimproc.vim', { 'do': 'make' }
-        Plug 'wellle/tmux-complete.vim' " Completion for tmux panes
-    else
-        " Auto completion framework
-        let g:ivim_completion_engine='YouCompleteMe'
-        Plug 'Valloric/YouCompleteMe', { 'do': './install.py' } "Auto completion framework
-        Plug 'honza/vim-snippets' " Snippets
-        Plug 'sirver/ultisnips' " Snippet engine
-    endif
-endif
-
-if count(g:ivim_bundle_groups, 'compile') " Compiling
-    Plug 'scrooloose/syntastic' " Syntax checking
-    Plug 'xuhdev/SingleCompile' " Single compile
-endif
+" if count(g:ivim_bundle_groups, 'complete') " Completion
+"     if g:ivim_autocomplete=='NEO'
+"         if has('lua')
+"             let g:ivim_completion_engine='neocomplete'
+"             Plug 'Shougo/neocomplete.vim' " Auto completion framework
+"         else
+"             let g:ivim_completion_engine='neocomplcache'
+"             Plug 'Shougo/neocomplcache.vim' " Auto completion framework
+"         endif
+"         Plug 'Shougo/neosnippet.vim' " Snippet engine
+"         Plug 'Shougo/neosnippet-snippets' " Snippets
+"         Plug 'Shougo/vimproc.vim', { 'do': 'make' }
+"         Plug 'wellle/tmux-complete.vim' " Completion for tmux panes
+"     else
+"         " Auto completion framework
+"         let g:ivim_completion_engine='YouCompleteMe'
+"         Plug 'Valloric/YouCompleteMe', { 'do': './install.py' } "Auto completion framework
+"         Plug 'honza/vim-snippets' " Snippets
+"         Plug 'sirver/ultisnips' " Snippet engine
+"     endif
+" endif
+"
+" if count(g:ivim_bundle_groups, 'compile') " Compiling
+"     Plug 'scrooloose/syntastic' " Syntax checking
+"     Plug 'xuhdev/SingleCompile' " Single compile
+" endif

 if count(g:ivim_bundle_groups, 'git') " Git
     Plug 'tpope/vim-fugitive' " Git wrapper
@@ -248,105 +246,105 @@ call plug#end()
 "-------------------------------------------------

 if count(g:ivim_bundle_groups, 'ui')
-    let g:airline#extensions#tabline#enabled=1
+    let g:airline#extensions#tabline#enabled  = 1
 else
     " Set title
     set title
-    set titlestring=%t%(\ %m%)%(\ (%{expand('%:p:h')})%)%(\ %a%)
+    set titlestring                           = %t%(\ %m%)%(\ (%{expand('%:p:h')})%)%(\ %a%)

     " Set tabline
-    set showtabline=2 " Always show tab line
+    set showtabline                           = 2 " Always show tab line
     " Set up tab labels
-    set guitablabel=%m%N:%t[%{tabpagewinnr(v:lnum)}]
-    set tabline=%!MyTabLine()
+    set guitablabel                           = %m%N:%t[%{tabpagewinnr(v:lnum)}]
+    set tabline                               = %!MyTabLine()
     function! MyTabLine()
-        let s=''
-        let t=tabpagenr() " The index of current page
-        let i=1
-        while i<=tabpagenr('$') " From the first page
-            let buflist=tabpagebuflist(i)
-            let winnr=tabpagewinnr(i)
-            let s.=(i==t ? '%#TabLineSel#' : '%#TabLine#')
-            let s.='%'.i.'T'
-            let s.=' '
-            let bufnr=buflist[winnr-1]
-            let file=bufname(bufnr)
-            let buftype = getbufvar(bufnr, 'buftype')
-            let m=''
+        let s                                 = ''
+        let t                                 = tabpagenr() " The index of current page
+        let i                                 = 1
+        while i                              <= tabpagenr('$') " From the first page
+            let buflist                       = tabpagebuflist(i)
+            let winnr                         = tabpagewinnr(i)
+            let s                            .= (i==t ? '%#TabLineSel#' : '%#TabLine#')
+            let s                            .= '%'.i.'T'
+            let s                            .= ' '
+            let bufnr                         = buflist[winnr-1]
+            let file                          = bufname(bufnr)
+            let buftype                       = getbufvar(bufnr, 'buftype')
+            let m                             = ''
             if getbufvar(bufnr, '&modified')
-                let m='[+]'
+                let m                         = '[+]'
             endif
-            if buftype=='nofile'
-                if file=~'\/.'
-                    let file=substitute(file, '.*\/\ze.', '', '')
+            if buftype                       == 'nofile'
+                if file                      =~ '\/.'
+                    let file                  = substitute(file, '.*\/\ze.', '', '')
lines 215-270/888 30%